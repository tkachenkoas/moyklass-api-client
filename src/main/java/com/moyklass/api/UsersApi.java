/*
 * API для работы с CRM \"Мой Класс\"
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.moyklass.api;

import com.google.gson.reflect.TypeToken;
import com.moyklass.api.invoker.*;
import com.moyklass.api.model.MKUser;
import com.moyklass.api.model.MKUsers;

import java.lang.reflect.Type;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1CompanyUsersGet
     * @param createdAt Дата создания. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону. (optional)
     * @param phone Номер телефона. Mожно указать часть номера для поиска по подстроке. (optional)
     * @param email Email. Можно указать часть адреса для поиска по подстроке (optional)
     * @param name Имя. Можно указать часть имени для поиска по подстроке. (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список учеников </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка в параметрах фильтра </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUsersGetCall(List<LocalDate> createdAt, String phone, String email, String name, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (createdAt != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "createdAt", createdAt));
        }

        if (phone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone", phone));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyUsersGetValidateBeforeCall(List<LocalDate> createdAt, String phone, String email, String name, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1CompanyUsersGetCall(createdAt, phone, email, name, offset, limit, _callback);
        return localVarCall;

    }

    /**
     * Список учеников
     * Производит поиск учеников в соответствии с фильтром
     * @param createdAt Дата создания. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону. (optional)
     * @param phone Номер телефона. Mожно указать часть номера для поиска по подстроке. (optional)
     * @param email Email. Можно указать часть адреса для поиска по подстроке (optional)
     * @param name Имя. Можно указать часть имени для поиска по подстроке. (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @return MKUsers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список учеников </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка в параметрах фильтра </td><td>  -  </td></tr>
     </table>
     */
    public MKUsers v1CompanyUsersGet(List<LocalDate> createdAt, String phone, String email, String name, Integer offset, Integer limit) throws ApiException {
        ApiResponse<MKUsers> localVarResp = v1CompanyUsersGetWithHttpInfo(createdAt, phone, email, name, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Список учеников
     * Производит поиск учеников в соответствии с фильтром
     * @param createdAt Дата создания. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону. (optional)
     * @param phone Номер телефона. Mожно указать часть номера для поиска по подстроке. (optional)
     * @param email Email. Можно указать часть адреса для поиска по подстроке (optional)
     * @param name Имя. Можно указать часть имени для поиска по подстроке. (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @return ApiResponse&lt;MKUsers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список учеников </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка в параметрах фильтра </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKUsers> v1CompanyUsersGetWithHttpInfo(List<LocalDate> createdAt, String phone, String email, String name, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyUsersGetValidateBeforeCall(createdAt, phone, email, name, offset, limit, null);
        Type localVarReturnType = new TypeToken<MKUsers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Список учеников (asynchronously)
     * Производит поиск учеников в соответствии с фильтром
     * @param createdAt Дата создания. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону. (optional)
     * @param phone Номер телефона. Mожно указать часть номера для поиска по подстроке. (optional)
     * @param email Email. Можно указать часть адреса для поиска по подстроке (optional)
     * @param name Имя. Можно указать часть имени для поиска по подстроке. (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список учеников </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка в параметрах фильтра </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUsersGetAsync(List<LocalDate> createdAt, String phone, String email, String name, Integer offset, Integer limit, final ApiCallback<MKUsers> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyUsersGetValidateBeforeCall(createdAt, phone, email, name, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<MKUsers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyUsersPost
     * @param mkUser Информация об ученике (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданного ученика </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUsersPostCall(MKUser mkUser, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkUser;

        // create path and map variables
        String localVarPath = "/v1/company/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyUsersPostValidateBeforeCall(MKUser mkUser, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mkUser' is set
        if (mkUser == null) {
            throw new ApiException("Missing the required parameter 'mkUser' when calling v1CompanyUsersPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyUsersPostCall(mkUser, _callback);
        return localVarCall;

    }

    /**
     * Создание ученика
     * Создает нового ученика
     * @param mkUser Информация об ученике (required)
     * @return MKUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданного ученика </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public MKUser v1CompanyUsersPost(MKUser mkUser) throws ApiException {
        ApiResponse<MKUser> localVarResp = v1CompanyUsersPostWithHttpInfo(mkUser);
        return localVarResp.getData();
    }

    /**
     * Создание ученика
     * Создает нового ученика
     * @param mkUser Информация об ученике (required)
     * @return ApiResponse&lt;MKUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданного ученика </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKUser> v1CompanyUsersPostWithHttpInfo(MKUser mkUser) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyUsersPostValidateBeforeCall(mkUser, null);
        Type localVarReturnType = new TypeToken<MKUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создание ученика (asynchronously)
     * Создает нового ученика
     * @param mkUser Информация об ученике (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданного ученика </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUsersPostAsync(MKUser mkUser, final ApiCallback<MKUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyUsersPostValidateBeforeCall(mkUser, _callback);
        Type localVarReturnType = new TypeToken<MKUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyUsersUserIdDelete
     * @param userId ID ученика (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ученик удален </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUsersUserIdDeleteCall(Long userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyUsersUserIdDeleteValidateBeforeCall(Long userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling v1CompanyUsersUserIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyUsersUserIdDeleteCall(userId, _callback);
        return localVarCall;

    }

    /**
     * Удаление ученика
     * Удаляет ученика из системы. Вместе с ним удаляет также все его записи, платежи, документы и т.д.
     * @param userId ID ученика (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ученик удален </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public void v1CompanyUsersUserIdDelete(Long userId) throws ApiException {
        v1CompanyUsersUserIdDeleteWithHttpInfo(userId);
    }

    /**
     * Удаление ученика
     * Удаляет ученика из системы. Вместе с ним удаляет также все его записи, платежи, документы и т.д.
     * @param userId ID ученика (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ученик удален </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1CompanyUsersUserIdDeleteWithHttpInfo(Long userId) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyUsersUserIdDeleteValidateBeforeCall(userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удаление ученика (asynchronously)
     * Удаляет ученика из системы. Вместе с ним удаляет также все его записи, платежи, документы и т.д.
     * @param userId ID ученика (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Ученик удален </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUsersUserIdDeleteAsync(Long userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyUsersUserIdDeleteValidateBeforeCall(userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyUsersUserIdGet
     * @param userId ID ученика (required)
     * @param includeJoins Включить в ответ заявки учеников (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные ученика </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUsersUserIdGetCall(Long userId, Boolean includeJoins, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeJoins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeJoins", includeJoins));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyUsersUserIdGetValidateBeforeCall(Long userId, Boolean includeJoins, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling v1CompanyUsersUserIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyUsersUserIdGetCall(userId, includeJoins, _callback);
        return localVarCall;

    }

    /**
     * Информация об ученике
     * Возвращает основную информацию об ученике
     * @param userId ID ученика (required)
     * @param includeJoins Включить в ответ заявки учеников (optional, default to false)
     * @return MKUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные ученика </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public MKUser v1CompanyUsersUserIdGet(Long userId, Boolean includeJoins) throws ApiException {
        ApiResponse<MKUser> localVarResp = v1CompanyUsersUserIdGetWithHttpInfo(userId, includeJoins);
        return localVarResp.getData();
    }

    /**
     * Информация об ученике
     * Возвращает основную информацию об ученике
     * @param userId ID ученика (required)
     * @param includeJoins Включить в ответ заявки учеников (optional, default to false)
     * @return ApiResponse&lt;MKUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные ученика </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKUser> v1CompanyUsersUserIdGetWithHttpInfo(Long userId, Boolean includeJoins) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyUsersUserIdGetValidateBeforeCall(userId, includeJoins, null);
        Type localVarReturnType = new TypeToken<MKUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Информация об ученике (asynchronously)
     * Возвращает основную информацию об ученике
     * @param userId ID ученика (required)
     * @param includeJoins Включить в ответ заявки учеников (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные ученика </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUsersUserIdGetAsync(Long userId, Boolean includeJoins, final ApiCallback<MKUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyUsersUserIdGetValidateBeforeCall(userId, includeJoins, _callback);
        Type localVarReturnType = new TypeToken<MKUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyUsersUserIdPost
     * @param userId ID ученика (required)
     * @param mkUser Обновленная информация об ученике (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные ученика </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUsersUserIdPostCall(Long userId, MKUser mkUser, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkUser;

        // create path and map variables
        String localVarPath = "/v1/company/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyUsersUserIdPostValidateBeforeCall(Long userId, MKUser mkUser, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling v1CompanyUsersUserIdPost(Async)");
        }
        
        // verify the required parameter 'mkUser' is set
        if (mkUser == null) {
            throw new ApiException("Missing the required parameter 'mkUser' when calling v1CompanyUsersUserIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyUsersUserIdPostCall(userId, mkUser, _callback);
        return localVarCall;

    }

    /**
     * Изменение ученика
     * Изменяет основную информацию об ученике
     * @param userId ID ученика (required)
     * @param mkUser Обновленная информация об ученике (required)
     * @return MKUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные ученика </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public MKUser v1CompanyUsersUserIdPost(Long userId, MKUser mkUser) throws ApiException {
        ApiResponse<MKUser> localVarResp = v1CompanyUsersUserIdPostWithHttpInfo(userId, mkUser);
        return localVarResp.getData();
    }

    /**
     * Изменение ученика
     * Изменяет основную информацию об ученике
     * @param userId ID ученика (required)
     * @param mkUser Обновленная информация об ученике (required)
     * @return ApiResponse&lt;MKUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные ученика </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKUser> v1CompanyUsersUserIdPostWithHttpInfo(Long userId, MKUser mkUser) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyUsersUserIdPostValidateBeforeCall(userId, mkUser, null);
        Type localVarReturnType = new TypeToken<MKUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Изменение ученика (asynchronously)
     * Изменяет основную информацию об ученике
     * @param userId ID ученика (required)
     * @param mkUser Обновленная информация об ученике (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные ученика </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUsersUserIdPostAsync(Long userId, MKUser mkUser, final ApiCallback<MKUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyUsersUserIdPostValidateBeforeCall(userId, mkUser, _callback);
        Type localVarReturnType = new TypeToken<MKUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyUsersUserIdStatusPost
     * @param userId ID ученика (required)
     * @param Object Новый статус и причина изменения (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Статус изменен </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUsersUserIdStatusPostCall(Long userId, Object Object, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = Object;

        // create path and map variables
        String localVarPath = "/v1/company/users/{userId}/status"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyUsersUserIdStatusPostValidateBeforeCall(Long userId, Object Object, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling v1CompanyUsersUserIdStatusPost(Async)");
        }
        
        // verify the required parameter 'Object' is set
        if (Object == null) {
            throw new ApiException("Missing the required parameter 'Object' when calling v1CompanyUsersUserIdStatusPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyUsersUserIdStatusPostCall(userId, Object, _callback);
        return localVarCall;

    }

    /**
     * Изменение статуса ученика
     * Изменяет статус ученика
     * @param userId ID ученика (required)
     * @param Object Новый статус и причина изменения (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Статус изменен </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public void v1CompanyUsersUserIdStatusPost(Long userId, Object Object) throws ApiException {
        v1CompanyUsersUserIdStatusPostWithHttpInfo(userId, Object);
    }

    /**
     * Изменение статуса ученика
     * Изменяет статус ученика
     * @param userId ID ученика (required)
     * @param Object Новый статус и причина изменения (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Статус изменен </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1CompanyUsersUserIdStatusPostWithHttpInfo(Long userId, Object Object) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyUsersUserIdStatusPostValidateBeforeCall(userId, Object, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Изменение статуса ученика (asynchronously)
     * Изменяет статус ученика
     * @param userId ID ученика (required)
     * @param Object Новый статус и причина изменения (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Статус изменен </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUsersUserIdStatusPostAsync(Long userId, Object Object, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyUsersUserIdStatusPostValidateBeforeCall(userId, Object, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
