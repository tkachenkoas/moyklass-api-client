/*
 * API для работы с CRM \"Мой Класс\"
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.moyklass.api;

import com.google.gson.reflect.TypeToken;
import com.moyklass.api.invoker.*;
import com.moyklass.api.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserCommonApi {
    private ApiClient localVarApiClient;

    public UserCommonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserCommonApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1UserAccountPasswordPost
     * @param mkUserPassword Новый пароль (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Пароль изменен </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserAccountPasswordPostCall(MKUserPassword mkUserPassword, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkUserPassword;

        // create path and map variables
        String localVarPath = "/v1/user/account/password";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "userSession", "xCookieToken", "xCsrfToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1UserAccountPasswordPostValidateBeforeCall(MKUserPassword mkUserPassword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mkUserPassword' is set
        if (mkUserPassword == null) {
            throw new ApiException("Missing the required parameter 'mkUserPassword' when calling v1UserAccountPasswordPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1UserAccountPasswordPostCall(mkUserPassword, _callback);
        return localVarCall;

    }

    /**
     * Изменение пароля
     * Изменяет пароль аккаунта 
     * @param mkUserPassword Новый пароль (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Пароль изменен </td><td>  -  </td></tr>
     </table>
     */
    public void v1UserAccountPasswordPost(MKUserPassword mkUserPassword) throws ApiException {
        v1UserAccountPasswordPostWithHttpInfo(mkUserPassword);
    }

    /**
     * Изменение пароля
     * Изменяет пароль аккаунта 
     * @param mkUserPassword Новый пароль (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Пароль изменен </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1UserAccountPasswordPostWithHttpInfo(MKUserPassword mkUserPassword) throws ApiException {
        okhttp3.Call localVarCall = v1UserAccountPasswordPostValidateBeforeCall(mkUserPassword, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Изменение пароля (asynchronously)
     * Изменяет пароль аккаунта 
     * @param mkUserPassword Новый пароль (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Пароль изменен </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserAccountPasswordPostAsync(MKUserPassword mkUserPassword, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1UserAccountPasswordPostValidateBeforeCall(mkUserPassword, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1UserAccountPost
     * @param mkAccountSettings Настройки аккаунта (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Настройки изменены </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserAccountPostCall(MKAccountSettings mkAccountSettings, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkAccountSettings;

        // create path and map variables
        String localVarPath = "/v1/user/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "userSession", "xCookieToken", "xCsrfToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1UserAccountPostValidateBeforeCall(MKAccountSettings mkAccountSettings, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mkAccountSettings' is set
        if (mkAccountSettings == null) {
            throw new ApiException("Missing the required parameter 'mkAccountSettings' when calling v1UserAccountPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1UserAccountPostCall(mkAccountSettings, _callback);
        return localVarCall;

    }

    /**
     * Изменение настроек
     * Применяет настройки аккаунта 
     * @param mkAccountSettings Настройки аккаунта (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Настройки изменены </td><td>  -  </td></tr>
     </table>
     */
    public void v1UserAccountPost(MKAccountSettings mkAccountSettings) throws ApiException {
        v1UserAccountPostWithHttpInfo(mkAccountSettings);
    }

    /**
     * Изменение настроек
     * Применяет настройки аккаунта 
     * @param mkAccountSettings Настройки аккаунта (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Настройки изменены </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1UserAccountPostWithHttpInfo(MKAccountSettings mkAccountSettings) throws ApiException {
        okhttp3.Call localVarCall = v1UserAccountPostValidateBeforeCall(mkAccountSettings, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Изменение настроек (asynchronously)
     * Применяет настройки аккаунта 
     * @param mkAccountSettings Настройки аккаунта (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Настройки изменены </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserAccountPostAsync(MKAccountSettings mkAccountSettings, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1UserAccountPostValidateBeforeCall(mkAccountSettings, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1UserBaseInfoGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные аккаунта </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserBaseInfoGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user/baseInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "userSession", "xCookieToken", "xCsrfToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1UserBaseInfoGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1UserBaseInfoGetCall(_callback);
        return localVarCall;

    }

    /**
     * Основная информация аккаунта
     * Возвращает основную информацию по аккаунту: ученики, их балансы, записи, группы, в которые они записаны и т.д. 
     * @return MKAccountInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные аккаунта </td><td>  -  </td></tr>
     </table>
     */
    public MKAccountInfo v1UserBaseInfoGet() throws ApiException {
        ApiResponse<MKAccountInfo> localVarResp = v1UserBaseInfoGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Основная информация аккаунта
     * Возвращает основную информацию по аккаунту: ученики, их балансы, записи, группы, в которые они записаны и т.д. 
     * @return ApiResponse&lt;MKAccountInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные аккаунта </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKAccountInfo> v1UserBaseInfoGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1UserBaseInfoGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MKAccountInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Основная информация аккаунта (asynchronously)
     * Возвращает основную информацию по аккаунту: ученики, их балансы, записи, группы, в которые они записаны и т.д. 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные аккаунта </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserBaseInfoGetAsync(final ApiCallback<MKAccountInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1UserBaseInfoGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MKAccountInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1UserLkSettingsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Настройки </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Домен личного кабинета не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserLkSettingsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user/lkSettings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1UserLkSettingsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1UserLkSettingsGetCall(_callback);
        return localVarCall;

    }

    /**
     * Настройки личного кабинета
     * 
     * @return MKLkSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Настройки </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Домен личного кабинета не найден </td><td>  -  </td></tr>
     </table>
     */
    public MKLkSettings v1UserLkSettingsGet() throws ApiException {
        ApiResponse<MKLkSettings> localVarResp = v1UserLkSettingsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Настройки личного кабинета
     * 
     * @return ApiResponse&lt;MKLkSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Настройки </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Домен личного кабинета не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKLkSettings> v1UserLkSettingsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1UserLkSettingsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MKLkSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Настройки личного кабинета (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Настройки </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Домен личного кабинета не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserLkSettingsGetAsync(final ApiCallback<MKLkSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1UserLkSettingsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MKLkSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1UserLkStyleGet
     * @param referer Имя сервера, с которого производится запрос. Домен должен быть прописан в настройках личного кабинета.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Стиль </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Домен личного кабинета не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserLkStyleGetCall(String referer, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user/lkStyle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (referer != null) {
            localVarHeaderParams.put("Referer", localVarApiClient.parameterToString(referer));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/css", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1UserLkStyleGetValidateBeforeCall(String referer, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1UserLkStyleGetCall(referer, _callback);
        return localVarCall;

    }

    /**
     * Стиль личного кабинета
     * Возвращает цвета оформления личного кабинета
     * @param referer Имя сервера, с которого производится запрос. Домен должен быть прописан в настройках личного кабинета.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Стиль </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Домен личного кабинета не найден </td><td>  -  </td></tr>
     </table>
     */
    public void v1UserLkStyleGet(String referer) throws ApiException {
        v1UserLkStyleGetWithHttpInfo(referer);
    }

    /**
     * Стиль личного кабинета
     * Возвращает цвета оформления личного кабинета
     * @param referer Имя сервера, с которого производится запрос. Домен должен быть прописан в настройках личного кабинета.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Стиль </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Домен личного кабинета не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1UserLkStyleGetWithHttpInfo(String referer) throws ApiException {
        okhttp3.Call localVarCall = v1UserLkStyleGetValidateBeforeCall(referer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Стиль личного кабинета (asynchronously)
     * Возвращает цвета оформления личного кабинета
     * @param referer Имя сервера, с которого производится запрос. Домен должен быть прописан в настройках личного кабинета.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Стиль </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Домен личного кабинета не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserLkStyleGetAsync(String referer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1UserLkStyleGetValidateBeforeCall(referer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1UserUsersUserIdPost
     * @param userId ID ученика (required)
     * @param mkUserRestricted Обновленная информация об ученике (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные ученика </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserUsersUserIdPostCall(Long userId, MKUserRestricted mkUserRestricted, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkUserRestricted;

        // create path and map variables
        String localVarPath = "/v1/user/users/{userId}"
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "userSession", "xCookieToken", "xCsrfToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1UserUsersUserIdPostValidateBeforeCall(Long userId, MKUserRestricted mkUserRestricted, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling v1UserUsersUserIdPost(Async)");
        }
        
        // verify the required parameter 'mkUserRestricted' is set
        if (mkUserRestricted == null) {
            throw new ApiException("Missing the required parameter 'mkUserRestricted' when calling v1UserUsersUserIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1UserUsersUserIdPostCall(userId, mkUserRestricted, _callback);
        return localVarCall;

    }

    /**
     * Изменение ученика
     * Изменяет основную информацию об ученике
     * @param userId ID ученика (required)
     * @param mkUserRestricted Обновленная информация об ученике (required)
     * @return MKUserRestricted
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные ученика </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public MKUserRestricted v1UserUsersUserIdPost(Long userId, MKUserRestricted mkUserRestricted) throws ApiException {
        ApiResponse<MKUserRestricted> localVarResp = v1UserUsersUserIdPostWithHttpInfo(userId, mkUserRestricted);
        return localVarResp.getData();
    }

    /**
     * Изменение ученика
     * Изменяет основную информацию об ученике
     * @param userId ID ученика (required)
     * @param mkUserRestricted Обновленная информация об ученике (required)
     * @return ApiResponse&lt;MKUserRestricted&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные ученика </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKUserRestricted> v1UserUsersUserIdPostWithHttpInfo(Long userId, MKUserRestricted mkUserRestricted) throws ApiException {
        okhttp3.Call localVarCall = v1UserUsersUserIdPostValidateBeforeCall(userId, mkUserRestricted, null);
        Type localVarReturnType = new TypeToken<MKUserRestricted>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Изменение ученика (asynchronously)
     * Изменяет основную информацию об ученике
     * @param userId ID ученика (required)
     * @param mkUserRestricted Обновленная информация об ученике (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные ученика </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ученик не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserUsersUserIdPostAsync(Long userId, MKUserRestricted mkUserRestricted, final ApiCallback<MKUserRestricted> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1UserUsersUserIdPostValidateBeforeCall(userId, mkUserRestricted, _callback);
        Type localVarReturnType = new TypeToken<MKUserRestricted>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
