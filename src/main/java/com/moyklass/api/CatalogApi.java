/*
 * API для работы с CRM \"Мой Класс\"
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.moyklass.api;

import com.moyklass.api.invoker.ApiCallback;
import com.moyklass.api.invoker.ApiClient;
import com.moyklass.api.invoker.ApiException;
import com.moyklass.api.invoker.ApiResponse;
import com.moyklass.api.invoker.Configuration;
import com.moyklass.api.invoker.Pair;
import com.moyklass.api.invoker.ProgressRequestBody;
import com.moyklass.api.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.moyklass.api.model.MKAdvSource;
import com.moyklass.api.model.MKClientStatus;
import com.moyklass.api.model.MKCreateSource;
import com.moyklass.api.model.MKJoinStatus;
import com.moyklass.api.model.MKJoinTag;
import com.moyklass.api.model.MKStatusReason;
import com.moyklass.api.model.MKUserAttribute;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CatalogApi {
    private ApiClient localVarApiClient;

    public CatalogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1CompanyAdvSourcesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список информационных источников </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyAdvSourcesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/advSources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyAdvSourcesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1CompanyAdvSourcesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Информационные источники
     * Возвращает список информационных источников
     * @return List&lt;MKAdvSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список информационных источников </td><td>  -  </td></tr>
     </table>
     */
    public List<MKAdvSource> v1CompanyAdvSourcesGet() throws ApiException {
        ApiResponse<List<MKAdvSource>> localVarResp = v1CompanyAdvSourcesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Информационные источники
     * Возвращает список информационных источников
     * @return ApiResponse&lt;List&lt;MKAdvSource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список информационных источников </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MKAdvSource>> v1CompanyAdvSourcesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1CompanyAdvSourcesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<MKAdvSource>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Информационные источники (asynchronously)
     * Возвращает список информационных источников
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список информационных источников </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyAdvSourcesGetAsync(final ApiCallback<List<MKAdvSource>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyAdvSourcesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<MKAdvSource>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyClientStatusesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список статусов </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyClientStatusesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/clientStatuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyClientStatusesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1CompanyClientStatusesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Статусы клиентов
     * Возвращает список статусов клиентов
     * @return List&lt;MKClientStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список статусов </td><td>  -  </td></tr>
     </table>
     */
    public List<MKClientStatus> v1CompanyClientStatusesGet() throws ApiException {
        ApiResponse<List<MKClientStatus>> localVarResp = v1CompanyClientStatusesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Статусы клиентов
     * Возвращает список статусов клиентов
     * @return ApiResponse&lt;List&lt;MKClientStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список статусов </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MKClientStatus>> v1CompanyClientStatusesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1CompanyClientStatusesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<MKClientStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Статусы клиентов (asynchronously)
     * Возвращает список статусов клиентов
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список статусов </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyClientStatusesGetAsync(final ApiCallback<List<MKClientStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyClientStatusesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<MKClientStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyCreateSourcesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список способов </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyCreateSourcesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/createSources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyCreateSourcesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1CompanyCreateSourcesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Способы заведения заявок
     * Возвращает список возможных способов заведения клиентов и заявок
     * @return List&lt;MKCreateSource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список способов </td><td>  -  </td></tr>
     </table>
     */
    public List<MKCreateSource> v1CompanyCreateSourcesGet() throws ApiException {
        ApiResponse<List<MKCreateSource>> localVarResp = v1CompanyCreateSourcesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Способы заведения заявок
     * Возвращает список возможных способов заведения клиентов и заявок
     * @return ApiResponse&lt;List&lt;MKCreateSource&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список способов </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MKCreateSource>> v1CompanyCreateSourcesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1CompanyCreateSourcesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<MKCreateSource>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Способы заведения заявок (asynchronously)
     * Возвращает список возможных способов заведения клиентов и заявок
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список способов </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyCreateSourcesGetAsync(final ApiCallback<List<MKCreateSource>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyCreateSourcesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<MKCreateSource>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyJoinStatusesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список статусов </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinStatusesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/joinStatuses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyJoinStatusesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1CompanyJoinStatusesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Статусы заявок
     * Возвращает список статусов заявок
     * @return List&lt;MKJoinStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список статусов </td><td>  -  </td></tr>
     </table>
     */
    public List<MKJoinStatus> v1CompanyJoinStatusesGet() throws ApiException {
        ApiResponse<List<MKJoinStatus>> localVarResp = v1CompanyJoinStatusesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Статусы заявок
     * Возвращает список статусов заявок
     * @return ApiResponse&lt;List&lt;MKJoinStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список статусов </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MKJoinStatus>> v1CompanyJoinStatusesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1CompanyJoinStatusesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<MKJoinStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Статусы заявок (asynchronously)
     * Возвращает список статусов заявок
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список статусов </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinStatusesGetAsync(final ApiCallback<List<MKJoinStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyJoinStatusesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<MKJoinStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyJoinTagsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список тегов </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinTagsGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/joinTags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyJoinTagsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1CompanyJoinTagsGetCall(_callback);
        return localVarCall;

    }

    /**
     * Теги заявок
     * Возвращает список тегов для заявок
     * @return List&lt;MKJoinTag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список тегов </td><td>  -  </td></tr>
     </table>
     */
    public List<MKJoinTag> v1CompanyJoinTagsGet() throws ApiException {
        ApiResponse<List<MKJoinTag>> localVarResp = v1CompanyJoinTagsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Теги заявок
     * Возвращает список тегов для заявок
     * @return ApiResponse&lt;List&lt;MKJoinTag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список тегов </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MKJoinTag>> v1CompanyJoinTagsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1CompanyJoinTagsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<MKJoinTag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Теги заявок (asynchronously)
     * Возвращает список тегов для заявок
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список тегов </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinTagsGetAsync(final ApiCallback<List<MKJoinTag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyJoinTagsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<MKJoinTag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyStatusReasonsGet
     * @param type Тип причины (optional, default to join)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список причин </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyStatusReasonsGetCall(String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/statusReasons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyStatusReasonsGetValidateBeforeCall(String type, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1CompanyStatusReasonsGetCall(type, _callback);
        return localVarCall;

    }

    /**
     * Причины изменения статуса
     * Возвращает причины изменения статуса записи
     * @param type Тип причины (optional, default to join)
     * @return List&lt;MKStatusReason&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список причин </td><td>  -  </td></tr>
     </table>
     */
    public List<MKStatusReason> v1CompanyStatusReasonsGet(String type) throws ApiException {
        ApiResponse<List<MKStatusReason>> localVarResp = v1CompanyStatusReasonsGetWithHttpInfo(type);
        return localVarResp.getData();
    }

    /**
     * Причины изменения статуса
     * Возвращает причины изменения статуса записи
     * @param type Тип причины (optional, default to join)
     * @return ApiResponse&lt;List&lt;MKStatusReason&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список причин </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MKStatusReason>> v1CompanyStatusReasonsGetWithHttpInfo(String type) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyStatusReasonsGetValidateBeforeCall(type, null);
        Type localVarReturnType = new TypeToken<List<MKStatusReason>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Причины изменения статуса (asynchronously)
     * Возвращает причины изменения статуса записи
     * @param type Тип причины (optional, default to join)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список причин </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyStatusReasonsGetAsync(String type, final ApiCallback<List<MKStatusReason>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyStatusReasonsGetValidateBeforeCall(type, _callback);
        Type localVarReturnType = new TypeToken<List<MKStatusReason>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyUserAttributesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список признаков </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUserAttributesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/userAttributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyUserAttributesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1CompanyUserAttributesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Признаки ученика
     * Возвращает список всех доступных признаков ученика
     * @return List&lt;MKUserAttribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список признаков </td><td>  -  </td></tr>
     </table>
     */
    public List<MKUserAttribute> v1CompanyUserAttributesGet() throws ApiException {
        ApiResponse<List<MKUserAttribute>> localVarResp = v1CompanyUserAttributesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Признаки ученика
     * Возвращает список всех доступных признаков ученика
     * @return ApiResponse&lt;List&lt;MKUserAttribute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список признаков </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MKUserAttribute>> v1CompanyUserAttributesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1CompanyUserAttributesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<MKUserAttribute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Признаки ученика (asynchronously)
     * Возвращает список всех доступных признаков ученика
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список признаков </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyUserAttributesGetAsync(final ApiCallback<List<MKUserAttribute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyUserAttributesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<MKUserAttribute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
