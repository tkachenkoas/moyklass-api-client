/*
 * API для работы с CRM \"Мой Класс\"
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.moyklass.api;

import com.moyklass.api.invoker.ApiCallback;
import com.moyklass.api.invoker.ApiClient;
import com.moyklass.api.invoker.ApiException;
import com.moyklass.api.invoker.ApiResponse;
import com.moyklass.api.invoker.Configuration;
import com.moyklass.api.invoker.Pair;
import com.moyklass.api.invoker.ProgressRequestBody;
import com.moyklass.api.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.moyklass.api.model.MKDownloadFile;
import com.moyklass.api.model.MKErrorHandling;
import com.moyklass.api.model.MKLicenseRestricts;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilesApi {
    private ApiClient localVarApiClient;

    public FilesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1CompanyFilesFileIdDelete
     * @param fileId ID файла (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Файл удален </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Файл не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyFilesFileIdDeleteCall(Long fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/files/{fileId}"
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyFilesFileIdDeleteValidateBeforeCall(Long fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling v1CompanyFilesFileIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyFilesFileIdDeleteCall(fileId, _callback);
        return localVarCall;

    }

    /**
     * Удаление файла
     * Удаление файла
     * @param fileId ID файла (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Файл удален </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Файл не найден </td><td>  -  </td></tr>
     </table>
     */
    public void v1CompanyFilesFileIdDelete(Long fileId) throws ApiException {
        v1CompanyFilesFileIdDeleteWithHttpInfo(fileId);
    }

    /**
     * Удаление файла
     * Удаление файла
     * @param fileId ID файла (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Файл удален </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Файл не найден </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1CompanyFilesFileIdDeleteWithHttpInfo(Long fileId) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyFilesFileIdDeleteValidateBeforeCall(fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удаление файла (asynchronously)
     * Удаление файла
     * @param fileId ID файла (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Файл удален </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Файл не найден </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyFilesFileIdDeleteAsync(Long fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyFilesFileIdDeleteValidateBeforeCall(fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyFilesFileIdGet
     * @param fileId ID файла (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные файла </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyFilesFileIdGetCall(Long fileId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/files/{fileId}"
            .replaceAll("\\{" + "fileId" + "\\}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyFilesFileIdGetValidateBeforeCall(Long fileId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling v1CompanyFilesFileIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyFilesFileIdGetCall(fileId, _callback);
        return localVarCall;

    }

    /**
     * Скачивание файла
     * Скачивание файла
     * @param fileId ID файла (required)
     * @return MKDownloadFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные файла </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
     </table>
     */
    public MKDownloadFile v1CompanyFilesFileIdGet(Long fileId) throws ApiException {
        ApiResponse<MKDownloadFile> localVarResp = v1CompanyFilesFileIdGetWithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * Скачивание файла
     * Скачивание файла
     * @param fileId ID файла (required)
     * @return ApiResponse&lt;MKDownloadFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные файла </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKDownloadFile> v1CompanyFilesFileIdGetWithHttpInfo(Long fileId) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyFilesFileIdGetValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<MKDownloadFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Скачивание файла (asynchronously)
     * Скачивание файла
     * @param fileId ID файла (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные файла </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyFilesFileIdGetAsync(Long fileId, final ApiCallback<MKDownloadFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyFilesFileIdGetValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<MKDownloadFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
