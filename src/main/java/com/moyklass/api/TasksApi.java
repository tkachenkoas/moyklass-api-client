/*
 * API для работы с CRM \"Мой Класс\"
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.moyklass.api;

import com.google.gson.reflect.TypeToken;
import com.moyklass.api.invoker.*;
import com.moyklass.api.model.MKTask;
import com.moyklass.api.model.MKTasks;

import java.lang.reflect.Type;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TasksApi {
    private ApiClient localVarApiClient;

    public TasksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1CompanyTasksGet
     * @param createdAt Дата создания. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону. (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param userId ID ученика (optional)
     * @param managerId ID сотрудника (optional)
     * @param isComplete Статус задачи, завершена или нет. (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список задач </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyTasksGetCall(List<LocalDate> createdAt, List<Long> filialId, List<Long> classId, Long userId, Long managerId, Boolean isComplete, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (createdAt != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "createdAt", createdAt));
        }

        if (filialId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filialId", filialId));
        }

        if (classId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "classId", classId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (managerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("managerId", managerId));
        }

        if (isComplete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isComplete", isComplete));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyTasksGetValidateBeforeCall(List<LocalDate> createdAt, List<Long> filialId, List<Long> classId, Long userId, Long managerId, Boolean isComplete, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1CompanyTasksGetCall(createdAt, filialId, classId, userId, managerId, isComplete, offset, limit, _callback);
        return localVarCall;

    }

    /**
     * Задачи
     * Возвращает список задач
     * @param createdAt Дата создания. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону. (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param userId ID ученика (optional)
     * @param managerId ID сотрудника (optional)
     * @param isComplete Статус задачи, завершена или нет. (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @return MKTasks
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список задач </td><td>  -  </td></tr>
     </table>
     */
    public MKTasks v1CompanyTasksGet(List<LocalDate> createdAt, List<Long> filialId, List<Long> classId, Long userId, Long managerId, Boolean isComplete, Integer offset, Integer limit) throws ApiException {
        ApiResponse<MKTasks> localVarResp = v1CompanyTasksGetWithHttpInfo(createdAt, filialId, classId, userId, managerId, isComplete, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Задачи
     * Возвращает список задач
     * @param createdAt Дата создания. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону. (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param userId ID ученика (optional)
     * @param managerId ID сотрудника (optional)
     * @param isComplete Статус задачи, завершена или нет. (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @return ApiResponse&lt;MKTasks&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список задач </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKTasks> v1CompanyTasksGetWithHttpInfo(List<LocalDate> createdAt, List<Long> filialId, List<Long> classId, Long userId, Long managerId, Boolean isComplete, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyTasksGetValidateBeforeCall(createdAt, filialId, classId, userId, managerId, isComplete, offset, limit, null);
        Type localVarReturnType = new TypeToken<MKTasks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Задачи (asynchronously)
     * Возвращает список задач
     * @param createdAt Дата создания. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону. (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param userId ID ученика (optional)
     * @param managerId ID сотрудника (optional)
     * @param isComplete Статус задачи, завершена или нет. (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список задач </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyTasksGetAsync(List<LocalDate> createdAt, List<Long> filialId, List<Long> classId, Long userId, Long managerId, Boolean isComplete, Integer offset, Integer limit, final ApiCallback<MKTasks> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyTasksGetValidateBeforeCall(createdAt, filialId, classId, userId, managerId, isComplete, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<MKTasks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyTasksPost
     * @param mkTask Информация о задаче (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной задачи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyTasksPostCall(MKTask mkTask, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkTask;

        // create path and map variables
        String localVarPath = "/v1/company/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyTasksPostValidateBeforeCall(MKTask mkTask, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mkTask' is set
        if (mkTask == null) {
            throw new ApiException("Missing the required parameter 'mkTask' when calling v1CompanyTasksPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyTasksPostCall(mkTask, _callback);
        return localVarCall;

    }

    /**
     * Содание задачи
     * Создает новую задачу
     * @param mkTask Информация о задаче (required)
     * @return MKTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной задачи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public MKTask v1CompanyTasksPost(MKTask mkTask) throws ApiException {
        ApiResponse<MKTask> localVarResp = v1CompanyTasksPostWithHttpInfo(mkTask);
        return localVarResp.getData();
    }

    /**
     * Содание задачи
     * Создает новую задачу
     * @param mkTask Информация о задаче (required)
     * @return ApiResponse&lt;MKTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной задачи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKTask> v1CompanyTasksPostWithHttpInfo(MKTask mkTask) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyTasksPostValidateBeforeCall(mkTask, null);
        Type localVarReturnType = new TypeToken<MKTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Содание задачи (asynchronously)
     * Создает новую задачу
     * @param mkTask Информация о задаче (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной задачи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyTasksPostAsync(MKTask mkTask, final ApiCallback<MKTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyTasksPostValidateBeforeCall(mkTask, _callback);
        Type localVarReturnType = new TypeToken<MKTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyTasksTaskIdDelete
     * @param taskId ID задачи (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Задача удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задача не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyTasksTaskIdDeleteCall(Long taskId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/tasks/{taskId}"
            .replaceAll("\\{" + "taskId" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyTasksTaskIdDeleteValidateBeforeCall(Long taskId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling v1CompanyTasksTaskIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyTasksTaskIdDeleteCall(taskId, _callback);
        return localVarCall;

    }

    /**
     * Удаление задачи
     * Удаляет задачу из системы.
     * @param taskId ID задачи (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Задача удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задача не найдена </td><td>  -  </td></tr>
     </table>
     */
    public void v1CompanyTasksTaskIdDelete(Long taskId) throws ApiException {
        v1CompanyTasksTaskIdDeleteWithHttpInfo(taskId);
    }

    /**
     * Удаление задачи
     * Удаляет задачу из системы.
     * @param taskId ID задачи (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Задача удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задача не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1CompanyTasksTaskIdDeleteWithHttpInfo(Long taskId) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyTasksTaskIdDeleteValidateBeforeCall(taskId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удаление задачи (asynchronously)
     * Удаляет задачу из системы.
     * @param taskId ID задачи (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Задача удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задача не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyTasksTaskIdDeleteAsync(Long taskId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyTasksTaskIdDeleteValidateBeforeCall(taskId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyTasksTaskIdGet
     * @param taskId ID задачи (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные задачи </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задача не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyTasksTaskIdGetCall(Long taskId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/tasks/{taskId}"
            .replaceAll("\\{" + "taskId" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyTasksTaskIdGetValidateBeforeCall(Long taskId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling v1CompanyTasksTaskIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyTasksTaskIdGetCall(taskId, _callback);
        return localVarCall;

    }

    /**
     * Информация о задаче
     * Возвращает задачу
     * @param taskId ID задачи (required)
     * @return MKTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные задачи </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задача не найдена </td><td>  -  </td></tr>
     </table>
     */
    public MKTask v1CompanyTasksTaskIdGet(Long taskId) throws ApiException {
        ApiResponse<MKTask> localVarResp = v1CompanyTasksTaskIdGetWithHttpInfo(taskId);
        return localVarResp.getData();
    }

    /**
     * Информация о задаче
     * Возвращает задачу
     * @param taskId ID задачи (required)
     * @return ApiResponse&lt;MKTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные задачи </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задача не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKTask> v1CompanyTasksTaskIdGetWithHttpInfo(Long taskId) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyTasksTaskIdGetValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<MKTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Информация о задаче (asynchronously)
     * Возвращает задачу
     * @param taskId ID задачи (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные задачи </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задача не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyTasksTaskIdGetAsync(Long taskId, final ApiCallback<MKTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyTasksTaskIdGetValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<MKTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyTasksTaskIdPost
     * @param taskId ID задачи (required)
     * @param mkTask Обновленая задача (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные задачи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задача не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyTasksTaskIdPostCall(Long taskId, MKTask mkTask, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkTask;

        // create path and map variables
        String localVarPath = "/v1/company/tasks/{taskId}"
            .replaceAll("\\{" + "taskId" + "\\}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyTasksTaskIdPostValidateBeforeCall(Long taskId, MKTask mkTask, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling v1CompanyTasksTaskIdPost(Async)");
        }
        
        // verify the required parameter 'mkTask' is set
        if (mkTask == null) {
            throw new ApiException("Missing the required parameter 'mkTask' when calling v1CompanyTasksTaskIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyTasksTaskIdPostCall(taskId, mkTask, _callback);
        return localVarCall;

    }

    /**
     * Изменение задачи
     * Изменяет задачу
     * @param taskId ID задачи (required)
     * @param mkTask Обновленая задача (required)
     * @return MKTask
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные задачи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задача не найдена </td><td>  -  </td></tr>
     </table>
     */
    public MKTask v1CompanyTasksTaskIdPost(Long taskId, MKTask mkTask) throws ApiException {
        ApiResponse<MKTask> localVarResp = v1CompanyTasksTaskIdPostWithHttpInfo(taskId, mkTask);
        return localVarResp.getData();
    }

    /**
     * Изменение задачи
     * Изменяет задачу
     * @param taskId ID задачи (required)
     * @param mkTask Обновленая задача (required)
     * @return ApiResponse&lt;MKTask&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные задачи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задача не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKTask> v1CompanyTasksTaskIdPostWithHttpInfo(Long taskId, MKTask mkTask) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyTasksTaskIdPostValidateBeforeCall(taskId, mkTask, null);
        Type localVarReturnType = new TypeToken<MKTask>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Изменение задачи (asynchronously)
     * Изменяет задачу
     * @param taskId ID задачи (required)
     * @param mkTask Обновленая задача (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные задачи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задача не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyTasksTaskIdPostAsync(Long taskId, MKTask mkTask, final ApiCallback<MKTask> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyTasksTaskIdPostValidateBeforeCall(taskId, mkTask, _callback);
        Type localVarReturnType = new TypeToken<MKTask>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
