/*
 * API для работы с CRM \"Мой Класс\"
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.moyklass.api;

import com.google.gson.reflect.TypeToken;
import com.moyklass.api.invoker.*;
import com.moyklass.api.model.MKCreateJoinResult;
import com.moyklass.api.model.MKUserJoin;
import com.moyklass.api.model.MKUserLessonRecord;
import com.moyklass.api.model.MKUserLessons;

import java.lang.reflect.Type;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserLessonsApi {
    private ApiClient localVarApiClient;

    public UserLessonsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserLessonsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1UserJoinsPost
     * @param mkUserJoin Информация о заявке (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Результат создания заявки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserJoinsPostCall(MKUserJoin mkUserJoin, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkUserJoin;

        // create path and map variables
        String localVarPath = "/v1/user/joins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "userSession", "xCookieToken", "xCsrfToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1UserJoinsPostValidateBeforeCall(MKUserJoin mkUserJoin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mkUserJoin' is set
        if (mkUserJoin == null) {
            throw new ApiException("Missing the required parameter 'mkUserJoin' when calling v1UserJoinsPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1UserJoinsPostCall(mkUserJoin, _callback);
        return localVarCall;

    }

    /**
     * Создание заявки
     * Создает новую заявку (запись) в группу
     * @param mkUserJoin Информация о заявке (required)
     * @return MKCreateJoinResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Результат создания заявки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public MKCreateJoinResult v1UserJoinsPost(MKUserJoin mkUserJoin) throws ApiException {
        ApiResponse<MKCreateJoinResult> localVarResp = v1UserJoinsPostWithHttpInfo(mkUserJoin);
        return localVarResp.getData();
    }

    /**
     * Создание заявки
     * Создает новую заявку (запись) в группу
     * @param mkUserJoin Информация о заявке (required)
     * @return ApiResponse&lt;MKCreateJoinResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Результат создания заявки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKCreateJoinResult> v1UserJoinsPostWithHttpInfo(MKUserJoin mkUserJoin) throws ApiException {
        okhttp3.Call localVarCall = v1UserJoinsPostValidateBeforeCall(mkUserJoin, null);
        Type localVarReturnType = new TypeToken<MKCreateJoinResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создание заявки (asynchronously)
     * Создает новую заявку (запись) в группу
     * @param mkUserJoin Информация о заявке (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Результат создания заявки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserJoinsPostAsync(MKUserJoin mkUserJoin, final ApiCallback<MKCreateJoinResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1UserJoinsPostValidateBeforeCall(mkUserJoin, _callback);
        Type localVarReturnType = new TypeToken<MKCreateJoinResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1UserLessonRecordsPost
     * @param mkUserLessonRecord Информация о записи (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной записи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserLessonRecordsPostCall(MKUserLessonRecord mkUserLessonRecord, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkUserLessonRecord;

        // create path and map variables
        String localVarPath = "/v1/user/lessonRecords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "userSession", "xCookieToken", "xCsrfToken" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1UserLessonRecordsPostValidateBeforeCall(MKUserLessonRecord mkUserLessonRecord, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mkUserLessonRecord' is set
        if (mkUserLessonRecord == null) {
            throw new ApiException("Missing the required parameter 'mkUserLessonRecord' when calling v1UserLessonRecordsPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1UserLessonRecordsPostCall(mkUserLessonRecord, _callback);
        return localVarCall;

    }

    /**
     * Содание записи на занятие
     * Создает новую запись на занятие
     * @param mkUserLessonRecord Информация о записи (required)
     * @return MKUserLessonRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной записи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public MKUserLessonRecord v1UserLessonRecordsPost(MKUserLessonRecord mkUserLessonRecord) throws ApiException {
        ApiResponse<MKUserLessonRecord> localVarResp = v1UserLessonRecordsPostWithHttpInfo(mkUserLessonRecord);
        return localVarResp.getData();
    }

    /**
     * Содание записи на занятие
     * Создает новую запись на занятие
     * @param mkUserLessonRecord Информация о записи (required)
     * @return ApiResponse&lt;MKUserLessonRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной записи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKUserLessonRecord> v1UserLessonRecordsPostWithHttpInfo(MKUserLessonRecord mkUserLessonRecord) throws ApiException {
        okhttp3.Call localVarCall = v1UserLessonRecordsPostValidateBeforeCall(mkUserLessonRecord, null);
        Type localVarReturnType = new TypeToken<MKUserLessonRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Содание записи на занятие (asynchronously)
     * Создает новую запись на занятие
     * @param mkUserLessonRecord Информация о записи (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной записи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserLessonRecordsPostAsync(MKUserLessonRecord mkUserLessonRecord, final ApiCallback<MKUserLessonRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1UserLessonRecordsPostValidateBeforeCall(mkUserLessonRecord, _callback);
        Type localVarReturnType = new TypeToken<MKUserLessonRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1UserLessonRecordsRecordIdDelete
     * @param recordId ID записи (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Запись удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserLessonRecordsRecordIdDeleteCall(Long recordId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user/lessonRecords/{recordId}"
            .replaceAll("\\{" + "recordId" + "\\}", localVarApiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "userSession", "xCookieToken", "xCsrfToken" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1UserLessonRecordsRecordIdDeleteValidateBeforeCall(Long recordId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling v1UserLessonRecordsRecordIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1UserLessonRecordsRecordIdDeleteCall(recordId, _callback);
        return localVarCall;

    }

    /**
     * Удаление записи
     * Удаляет запись на занятие
     * @param recordId ID записи (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Запись удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public void v1UserLessonRecordsRecordIdDelete(Long recordId) throws ApiException {
        v1UserLessonRecordsRecordIdDeleteWithHttpInfo(recordId);
    }

    /**
     * Удаление записи
     * Удаляет запись на занятие
     * @param recordId ID записи (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Запись удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1UserLessonRecordsRecordIdDeleteWithHttpInfo(Long recordId) throws ApiException {
        okhttp3.Call localVarCall = v1UserLessonRecordsRecordIdDeleteValidateBeforeCall(recordId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удаление записи (asynchronously)
     * Удаляет запись на занятие
     * @param recordId ID записи (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Запись удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserLessonRecordsRecordIdDeleteAsync(Long recordId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1UserLessonRecordsRecordIdDeleteValidateBeforeCall(recordId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1UserLessonRecordsRecordIdGet
     * @param recordId ID записи (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные записи </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserLessonRecordsRecordIdGetCall(Long recordId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user/lessonRecords/{recordId}"
            .replaceAll("\\{" + "recordId" + "\\}", localVarApiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "userSession", "xCookieToken", "xCsrfToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1UserLessonRecordsRecordIdGetValidateBeforeCall(Long recordId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling v1UserLessonRecordsRecordIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = v1UserLessonRecordsRecordIdGetCall(recordId, _callback);
        return localVarCall;

    }

    /**
     * Информация о записи
     * Возвращает информацию о записи на занятие
     * @param recordId ID записи (required)
     * @return MKUserLessonRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные записи </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public MKUserLessonRecord v1UserLessonRecordsRecordIdGet(Long recordId) throws ApiException {
        ApiResponse<MKUserLessonRecord> localVarResp = v1UserLessonRecordsRecordIdGetWithHttpInfo(recordId);
        return localVarResp.getData();
    }

    /**
     * Информация о записи
     * Возвращает информацию о записи на занятие
     * @param recordId ID записи (required)
     * @return ApiResponse&lt;MKUserLessonRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные записи </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKUserLessonRecord> v1UserLessonRecordsRecordIdGetWithHttpInfo(Long recordId) throws ApiException {
        okhttp3.Call localVarCall = v1UserLessonRecordsRecordIdGetValidateBeforeCall(recordId, null);
        Type localVarReturnType = new TypeToken<MKUserLessonRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Информация о записи (asynchronously)
     * Возвращает информацию о записи на занятие
     * @param recordId ID записи (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные записи </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserLessonRecordsRecordIdGetAsync(Long recordId, final ApiCallback<MKUserLessonRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1UserLessonRecordsRecordIdGetValidateBeforeCall(recordId, _callback);
        Type localVarReturnType = new TypeToken<MKUserLessonRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1UserLessonsGet
     * @param date Дата проведения занятий. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону (optional)
     * @param roomId ID аудитории (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param teacherId ID сотрудника - преподавателя (optional)
     * @param statusId Статус занятия. 0 - не проведено, 1 - проведено (optional)
     * @param userId ID ученика, записанного на занятие (optional)
     * @param scopeUserId ID ученика для определения видимости занятий (optional)
     * @param visit Статус посещения занятия ученика, указанного в userId. Без указания userId не имеет смысла. visited - Посетил, lost - Пропустил. Выбираются только проведенные занятия.  (optional)
     * @param debt Занятия в долг (не оплаченные) (optional)
     * @param includeRecords Включить в ответ записи на занятия (optional, default to false)
     * @param includeComments Включить в ответ комментарии к занятию (optional, default to false)
     * @param includeMarks Включить в ответ оценки к занятию (optional, default to false)
     * @param includeTasks Включить в ответ задания к занятию (optional, default to false)
     * @param includeParams Включить в ответ дополнительную информацию к занятию (optional, default to false)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param sort Поле сортировки (optional, default to id)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список занятий </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserLessonsGetCall(List<LocalDate> date, List<Long> roomId, List<Long> filialId, List<Long> classId, List<Long> teacherId, Integer statusId, Long userId, Long scopeUserId, String visit, Boolean debt, Boolean includeRecords, Boolean includeComments, Boolean includeMarks, Boolean includeTasks, Boolean includeParams, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/user/lessons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (date != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "date", date));
        }

        if (roomId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "roomId", roomId));
        }

        if (filialId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filialId", filialId));
        }

        if (classId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "classId", classId));
        }

        if (teacherId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "teacherId", teacherId));
        }

        if (statusId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusId", statusId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (scopeUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scopeUserId", scopeUserId));
        }

        if (visit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visit", visit));
        }

        if (debt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("debt", debt));
        }

        if (includeRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeRecords", includeRecords));
        }

        if (includeComments != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeComments", includeComments));
        }

        if (includeMarks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeMarks", includeMarks));
        }

        if (includeTasks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTasks", includeTasks));
        }

        if (includeParams != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeParams", includeParams));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "userSession", "xCookieToken", "xCsrfToken" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1UserLessonsGetValidateBeforeCall(List<LocalDate> date, List<Long> roomId, List<Long> filialId, List<Long> classId, List<Long> teacherId, Integer statusId, Long userId, Long scopeUserId, String visit, Boolean debt, Boolean includeRecords, Boolean includeComments, Boolean includeMarks, Boolean includeTasks, Boolean includeParams, Integer limit, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1UserLessonsGetCall(date, roomId, filialId, classId, teacherId, statusId, userId, scopeUserId, visit, debt, includeRecords, includeComments, includeMarks, includeTasks, includeParams, limit, offset, sort, _callback);
        return localVarCall;

    }

    /**
     * Занятия
     * Возвращает список занятий
     * @param date Дата проведения занятий. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону (optional)
     * @param roomId ID аудитории (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param teacherId ID сотрудника - преподавателя (optional)
     * @param statusId Статус занятия. 0 - не проведено, 1 - проведено (optional)
     * @param userId ID ученика, записанного на занятие (optional)
     * @param scopeUserId ID ученика для определения видимости занятий (optional)
     * @param visit Статус посещения занятия ученика, указанного в userId. Без указания userId не имеет смысла. visited - Посетил, lost - Пропустил. Выбираются только проведенные занятия.  (optional)
     * @param debt Занятия в долг (не оплаченные) (optional)
     * @param includeRecords Включить в ответ записи на занятия (optional, default to false)
     * @param includeComments Включить в ответ комментарии к занятию (optional, default to false)
     * @param includeMarks Включить в ответ оценки к занятию (optional, default to false)
     * @param includeTasks Включить в ответ задания к занятию (optional, default to false)
     * @param includeParams Включить в ответ дополнительную информацию к занятию (optional, default to false)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param sort Поле сортировки (optional, default to id)
     * @return MKUserLessons
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список занятий </td><td>  -  </td></tr>
     </table>
     */
    public MKUserLessons v1UserLessonsGet(List<LocalDate> date, List<Long> roomId, List<Long> filialId, List<Long> classId, List<Long> teacherId, Integer statusId, Long userId, Long scopeUserId, String visit, Boolean debt, Boolean includeRecords, Boolean includeComments, Boolean includeMarks, Boolean includeTasks, Boolean includeParams, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<MKUserLessons> localVarResp = v1UserLessonsGetWithHttpInfo(date, roomId, filialId, classId, teacherId, statusId, userId, scopeUserId, visit, debt, includeRecords, includeComments, includeMarks, includeTasks, includeParams, limit, offset, sort);
        return localVarResp.getData();
    }

    /**
     * Занятия
     * Возвращает список занятий
     * @param date Дата проведения занятий. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону (optional)
     * @param roomId ID аудитории (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param teacherId ID сотрудника - преподавателя (optional)
     * @param statusId Статус занятия. 0 - не проведено, 1 - проведено (optional)
     * @param userId ID ученика, записанного на занятие (optional)
     * @param scopeUserId ID ученика для определения видимости занятий (optional)
     * @param visit Статус посещения занятия ученика, указанного в userId. Без указания userId не имеет смысла. visited - Посетил, lost - Пропустил. Выбираются только проведенные занятия.  (optional)
     * @param debt Занятия в долг (не оплаченные) (optional)
     * @param includeRecords Включить в ответ записи на занятия (optional, default to false)
     * @param includeComments Включить в ответ комментарии к занятию (optional, default to false)
     * @param includeMarks Включить в ответ оценки к занятию (optional, default to false)
     * @param includeTasks Включить в ответ задания к занятию (optional, default to false)
     * @param includeParams Включить в ответ дополнительную информацию к занятию (optional, default to false)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param sort Поле сортировки (optional, default to id)
     * @return ApiResponse&lt;MKUserLessons&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список занятий </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKUserLessons> v1UserLessonsGetWithHttpInfo(List<LocalDate> date, List<Long> roomId, List<Long> filialId, List<Long> classId, List<Long> teacherId, Integer statusId, Long userId, Long scopeUserId, String visit, Boolean debt, Boolean includeRecords, Boolean includeComments, Boolean includeMarks, Boolean includeTasks, Boolean includeParams, Integer limit, Integer offset, String sort) throws ApiException {
        okhttp3.Call localVarCall = v1UserLessonsGetValidateBeforeCall(date, roomId, filialId, classId, teacherId, statusId, userId, scopeUserId, visit, debt, includeRecords, includeComments, includeMarks, includeTasks, includeParams, limit, offset, sort, null);
        Type localVarReturnType = new TypeToken<MKUserLessons>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Занятия (asynchronously)
     * Возвращает список занятий
     * @param date Дата проведения занятий. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону (optional)
     * @param roomId ID аудитории (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param teacherId ID сотрудника - преподавателя (optional)
     * @param statusId Статус занятия. 0 - не проведено, 1 - проведено (optional)
     * @param userId ID ученика, записанного на занятие (optional)
     * @param scopeUserId ID ученика для определения видимости занятий (optional)
     * @param visit Статус посещения занятия ученика, указанного в userId. Без указания userId не имеет смысла. visited - Посетил, lost - Пропустил. Выбираются только проведенные занятия.  (optional)
     * @param debt Занятия в долг (не оплаченные) (optional)
     * @param includeRecords Включить в ответ записи на занятия (optional, default to false)
     * @param includeComments Включить в ответ комментарии к занятию (optional, default to false)
     * @param includeMarks Включить в ответ оценки к занятию (optional, default to false)
     * @param includeTasks Включить в ответ задания к занятию (optional, default to false)
     * @param includeParams Включить в ответ дополнительную информацию к занятию (optional, default to false)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param sort Поле сортировки (optional, default to id)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список занятий </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1UserLessonsGetAsync(List<LocalDate> date, List<Long> roomId, List<Long> filialId, List<Long> classId, List<Long> teacherId, Integer statusId, Long userId, Long scopeUserId, String visit, Boolean debt, Boolean includeRecords, Boolean includeComments, Boolean includeMarks, Boolean includeTasks, Boolean includeParams, Integer limit, Integer offset, String sort, final ApiCallback<MKUserLessons> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1UserLessonsGetValidateBeforeCall(date, roomId, filialId, classId, teacherId, statusId, userId, scopeUserId, visit, debt, includeRecords, includeComments, includeMarks, includeTasks, includeParams, limit, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<MKUserLessons>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
