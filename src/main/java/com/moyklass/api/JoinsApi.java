/*
 * API для работы с CRM \"Мой Класс\"
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.moyklass.api;

import com.google.gson.reflect.TypeToken;
import com.moyklass.api.invoker.*;
import com.moyklass.api.model.MKJoin;
import com.moyklass.api.model.MKJoinEdit;
import com.moyklass.api.model.MKJoins;

import java.lang.reflect.Type;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JoinsApi {
    private ApiClient localVarApiClient;

    public JoinsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JoinsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1CompanyJoinsGet
     * @param createdAt Дата создания. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону. (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param statusId Статус записи (optional)
     * @param userId ID ученика (optional)
     * @param managerId ID сотрудника (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список заявок </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinsGetCall(List<LocalDate> createdAt, List<Long> filialId, List<Long> classId, Integer statusId, Long userId, Long managerId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/joins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (createdAt != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "createdAt", createdAt));
        }

        if (filialId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filialId", filialId));
        }

        if (classId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "classId", classId));
        }

        if (statusId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusId", statusId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (managerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("managerId", managerId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyJoinsGetValidateBeforeCall(List<LocalDate> createdAt, List<Long> filialId, List<Long> classId, Integer statusId, Long userId, Long managerId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1CompanyJoinsGetCall(createdAt, filialId, classId, statusId, userId, managerId, offset, limit, _callback);
        return localVarCall;

    }

    /**
     * Заявки
     * Возвращает список заявок (записей) в группы
     * @param createdAt Дата создания. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону. (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param statusId Статус записи (optional)
     * @param userId ID ученика (optional)
     * @param managerId ID сотрудника (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @return MKJoins
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список заявок </td><td>  -  </td></tr>
     </table>
     */
    public MKJoins v1CompanyJoinsGet(List<LocalDate> createdAt, List<Long> filialId, List<Long> classId, Integer statusId, Long userId, Long managerId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<MKJoins> localVarResp = v1CompanyJoinsGetWithHttpInfo(createdAt, filialId, classId, statusId, userId, managerId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Заявки
     * Возвращает список заявок (записей) в группы
     * @param createdAt Дата создания. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону. (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param statusId Статус записи (optional)
     * @param userId ID ученика (optional)
     * @param managerId ID сотрудника (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @return ApiResponse&lt;MKJoins&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список заявок </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKJoins> v1CompanyJoinsGetWithHttpInfo(List<LocalDate> createdAt, List<Long> filialId, List<Long> classId, Integer statusId, Long userId, Long managerId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyJoinsGetValidateBeforeCall(createdAt, filialId, classId, statusId, userId, managerId, offset, limit, null);
        Type localVarReturnType = new TypeToken<MKJoins>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Заявки (asynchronously)
     * Возвращает список заявок (записей) в группы
     * @param createdAt Дата создания. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону. (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param statusId Статус записи (optional)
     * @param userId ID ученика (optional)
     * @param managerId ID сотрудника (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список заявок </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinsGetAsync(List<LocalDate> createdAt, List<Long> filialId, List<Long> classId, Integer statusId, Long userId, Long managerId, Integer offset, Integer limit, final ApiCallback<MKJoins> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyJoinsGetValidateBeforeCall(createdAt, filialId, classId, statusId, userId, managerId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<MKJoins>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyJoinsJoinIdDelete
     * @param joinId ID заявки (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Заявка удалена </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinsJoinIdDeleteCall(Long joinId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/joins/{joinId}"
            .replaceAll("\\{" + "joinId" + "\\}", localVarApiClient.escapeString(joinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyJoinsJoinIdDeleteValidateBeforeCall(Long joinId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'joinId' is set
        if (joinId == null) {
            throw new ApiException("Missing the required parameter 'joinId' when calling v1CompanyJoinsJoinIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyJoinsJoinIdDeleteCall(joinId, _callback);
        return localVarCall;

    }

    /**
     * Удаление заявки
     * Удаляет заявку из системы.
     * @param joinId ID заявки (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Заявка удалена </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public void v1CompanyJoinsJoinIdDelete(Long joinId) throws ApiException {
        v1CompanyJoinsJoinIdDeleteWithHttpInfo(joinId);
    }

    /**
     * Удаление заявки
     * Удаляет заявку из системы.
     * @param joinId ID заявки (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Заявка удалена </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1CompanyJoinsJoinIdDeleteWithHttpInfo(Long joinId) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyJoinsJoinIdDeleteValidateBeforeCall(joinId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удаление заявки (asynchronously)
     * Удаляет заявку из системы.
     * @param joinId ID заявки (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Заявка удалена </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinsJoinIdDeleteAsync(Long joinId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyJoinsJoinIdDeleteValidateBeforeCall(joinId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyJoinsJoinIdGet
     * @param joinId ID заявки (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные заявки </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinsJoinIdGetCall(Long joinId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/joins/{joinId}"
            .replaceAll("\\{" + "joinId" + "\\}", localVarApiClient.escapeString(joinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyJoinsJoinIdGetValidateBeforeCall(Long joinId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'joinId' is set
        if (joinId == null) {
            throw new ApiException("Missing the required parameter 'joinId' when calling v1CompanyJoinsJoinIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyJoinsJoinIdGetCall(joinId, _callback);
        return localVarCall;

    }

    /**
     * Информация о заявке
     * Возвращает информацию о заявке
     * @param joinId ID заявки (required)
     * @return MKJoin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные заявки </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public MKJoin v1CompanyJoinsJoinIdGet(Long joinId) throws ApiException {
        ApiResponse<MKJoin> localVarResp = v1CompanyJoinsJoinIdGetWithHttpInfo(joinId);
        return localVarResp.getData();
    }

    /**
     * Информация о заявке
     * Возвращает информацию о заявке
     * @param joinId ID заявки (required)
     * @return ApiResponse&lt;MKJoin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные заявки </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKJoin> v1CompanyJoinsJoinIdGetWithHttpInfo(Long joinId) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyJoinsJoinIdGetValidateBeforeCall(joinId, null);
        Type localVarReturnType = new TypeToken<MKJoin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Информация о заявке (asynchronously)
     * Возвращает информацию о заявке
     * @param joinId ID заявки (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные заявки </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinsJoinIdGetAsync(Long joinId, final ApiCallback<MKJoin> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyJoinsJoinIdGetValidateBeforeCall(joinId, _callback);
        Type localVarReturnType = new TypeToken<MKJoin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyJoinsJoinIdPost
     * @param joinId ID заявки (required)
     * @param mkJoinEdit Обновленная информация по заявке (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные заявки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinsJoinIdPostCall(Long joinId, MKJoinEdit mkJoinEdit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkJoinEdit;

        // create path and map variables
        String localVarPath = "/v1/company/joins/{joinId}"
            .replaceAll("\\{" + "joinId" + "\\}", localVarApiClient.escapeString(joinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyJoinsJoinIdPostValidateBeforeCall(Long joinId, MKJoinEdit mkJoinEdit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'joinId' is set
        if (joinId == null) {
            throw new ApiException("Missing the required parameter 'joinId' when calling v1CompanyJoinsJoinIdPost(Async)");
        }
        
        // verify the required parameter 'mkJoinEdit' is set
        if (mkJoinEdit == null) {
            throw new ApiException("Missing the required parameter 'mkJoinEdit' when calling v1CompanyJoinsJoinIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyJoinsJoinIdPostCall(joinId, mkJoinEdit, _callback);
        return localVarCall;

    }

    /**
     * Изменение заявки
     * Изменяет основную информацию по заявке
     * @param joinId ID заявки (required)
     * @param mkJoinEdit Обновленная информация по заявке (required)
     * @return MKJoin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные заявки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public MKJoin v1CompanyJoinsJoinIdPost(Long joinId, MKJoinEdit mkJoinEdit) throws ApiException {
        ApiResponse<MKJoin> localVarResp = v1CompanyJoinsJoinIdPostWithHttpInfo(joinId, mkJoinEdit);
        return localVarResp.getData();
    }

    /**
     * Изменение заявки
     * Изменяет основную информацию по заявке
     * @param joinId ID заявки (required)
     * @param mkJoinEdit Обновленная информация по заявке (required)
     * @return ApiResponse&lt;MKJoin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные заявки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKJoin> v1CompanyJoinsJoinIdPostWithHttpInfo(Long joinId, MKJoinEdit mkJoinEdit) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyJoinsJoinIdPostValidateBeforeCall(joinId, mkJoinEdit, null);
        Type localVarReturnType = new TypeToken<MKJoin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Изменение заявки (asynchronously)
     * Изменяет основную информацию по заявке
     * @param joinId ID заявки (required)
     * @param mkJoinEdit Обновленная информация по заявке (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные заявки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinsJoinIdPostAsync(Long joinId, MKJoinEdit mkJoinEdit, final ApiCallback<MKJoin> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyJoinsJoinIdPostValidateBeforeCall(joinId, mkJoinEdit, _callback);
        Type localVarReturnType = new TypeToken<MKJoin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyJoinsJoinIdStatusPost
     * @param joinId ID заявки (required)
     * @param Object Новый статус и причина изменения (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Статус изменен </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinsJoinIdStatusPostCall(Long joinId, Object Object, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = Object;

        // create path and map variables
        String localVarPath = "/v1/company/joins/{joinId}/status"
            .replaceAll("\\{" + "joinId" + "\\}", localVarApiClient.escapeString(joinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyJoinsJoinIdStatusPostValidateBeforeCall(Long joinId, Object Object, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'joinId' is set
        if (joinId == null) {
            throw new ApiException("Missing the required parameter 'joinId' when calling v1CompanyJoinsJoinIdStatusPost(Async)");
        }
        
        // verify the required parameter 'Object' is set
        if (Object == null) {
            throw new ApiException("Missing the required parameter 'Object' when calling v1CompanyJoinsJoinIdStatusPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyJoinsJoinIdStatusPostCall(joinId, Object, _callback);
        return localVarCall;

    }

    /**
     * Изменение статуса заявки
     * Изменяет статус заявки
     * @param joinId ID заявки (required)
     * @param Object Новый статус и причина изменения (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Статус изменен </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public void v1CompanyJoinsJoinIdStatusPost(Long joinId, Object Object) throws ApiException {
        v1CompanyJoinsJoinIdStatusPostWithHttpInfo(joinId, Object);
    }

    /**
     * Изменение статуса заявки
     * Изменяет статус заявки
     * @param joinId ID заявки (required)
     * @param Object Новый статус и причина изменения (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Статус изменен </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1CompanyJoinsJoinIdStatusPostWithHttpInfo(Long joinId, Object Object) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyJoinsJoinIdStatusPostValidateBeforeCall(joinId, Object, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Изменение статуса заявки (asynchronously)
     * Изменяет статус заявки
     * @param joinId ID заявки (required)
     * @param Object Новый статус и причина изменения (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Статус изменен </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinsJoinIdStatusPostAsync(Long joinId, Object Object, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyJoinsJoinIdStatusPostValidateBeforeCall(joinId, Object, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyJoinsJoinIdTagsPost
     * @param joinId ID заявки (required)
     * @param Object Новые теги (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Теги изменены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinsJoinIdTagsPostCall(Long joinId, Object Object, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = Object;

        // create path and map variables
        String localVarPath = "/v1/company/joins/{joinId}/tags"
            .replaceAll("\\{" + "joinId" + "\\}", localVarApiClient.escapeString(joinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyJoinsJoinIdTagsPostValidateBeforeCall(Long joinId, Object Object, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'joinId' is set
        if (joinId == null) {
            throw new ApiException("Missing the required parameter 'joinId' when calling v1CompanyJoinsJoinIdTagsPost(Async)");
        }
        
        // verify the required parameter 'Object' is set
        if (Object == null) {
            throw new ApiException("Missing the required parameter 'Object' when calling v1CompanyJoinsJoinIdTagsPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyJoinsJoinIdTagsPostCall(joinId, Object, _callback);
        return localVarCall;

    }

    /**
     * Изменение тегов заявки
     * Изменяет теги заявки
     * @param joinId ID заявки (required)
     * @param Object Новые теги (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Теги изменены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public void v1CompanyJoinsJoinIdTagsPost(Long joinId, Object Object) throws ApiException {
        v1CompanyJoinsJoinIdTagsPostWithHttpInfo(joinId, Object);
    }

    /**
     * Изменение тегов заявки
     * Изменяет теги заявки
     * @param joinId ID заявки (required)
     * @param Object Новые теги (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Теги изменены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1CompanyJoinsJoinIdTagsPostWithHttpInfo(Long joinId, Object Object) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyJoinsJoinIdTagsPostValidateBeforeCall(joinId, Object, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Изменение тегов заявки (asynchronously)
     * Изменяет теги заявки
     * @param joinId ID заявки (required)
     * @param Object Новые теги (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Теги изменены </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Заявка не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinsJoinIdTagsPostAsync(Long joinId, Object Object, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyJoinsJoinIdTagsPostValidateBeforeCall(joinId, Object, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyJoinsPost
     * @param mkJoin Информация о заявке (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной заявки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Ошибка на стороне сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinsPostCall(MKJoin mkJoin, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkJoin;

        // create path and map variables
        String localVarPath = "/v1/company/joins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyJoinsPostValidateBeforeCall(MKJoin mkJoin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mkJoin' is set
        if (mkJoin == null) {
            throw new ApiException("Missing the required parameter 'mkJoin' when calling v1CompanyJoinsPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyJoinsPostCall(mkJoin, _callback);
        return localVarCall;

    }

    /**
     * Создание заявки
     * Создает новую заявку (запись) в группу
     * @param mkJoin Информация о заявке (required)
     * @return MKJoin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной заявки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Ошибка на стороне сервера </td><td>  -  </td></tr>
     </table>
     */
    public MKJoin v1CompanyJoinsPost(MKJoin mkJoin) throws ApiException {
        ApiResponse<MKJoin> localVarResp = v1CompanyJoinsPostWithHttpInfo(mkJoin);
        return localVarResp.getData();
    }

    /**
     * Создание заявки
     * Создает новую заявку (запись) в группу
     * @param mkJoin Информация о заявке (required)
     * @return ApiResponse&lt;MKJoin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной заявки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Ошибка на стороне сервера </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKJoin> v1CompanyJoinsPostWithHttpInfo(MKJoin mkJoin) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyJoinsPostValidateBeforeCall(mkJoin, null);
        Type localVarReturnType = new TypeToken<MKJoin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Создание заявки (asynchronously)
     * Создает новую заявку (запись) в группу
     * @param mkJoin Информация о заявке (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной заявки </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Ошибка на стороне сервера </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyJoinsPostAsync(MKJoin mkJoin, final ApiCallback<MKJoin> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyJoinsPostValidateBeforeCall(mkJoin, _callback);
        Type localVarReturnType = new TypeToken<MKJoin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
