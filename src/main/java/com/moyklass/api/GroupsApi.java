/*
 * API для работы с CRM \"Мой Класс\"
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.moyklass.api;

import com.google.gson.reflect.TypeToken;
import com.moyklass.api.invoker.*;
import com.moyklass.api.model.*;

import java.lang.reflect.Type;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupsApi {
    private ApiClient localVarApiClient;

    public GroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1CompanyClassesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список групп </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyClassesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/classes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyClassesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1CompanyClassesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Группы
     * Возвращает список групп (наборов)
     * @return List&lt;MKClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список групп </td><td>  -  </td></tr>
     </table>
     */
    public List<MKClass> v1CompanyClassesGet() throws ApiException {
        ApiResponse<List<MKClass>> localVarResp = v1CompanyClassesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Группы
     * Возвращает список групп (наборов)
     * @return ApiResponse&lt;List&lt;MKClass&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список групп </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MKClass>> v1CompanyClassesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v1CompanyClassesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<MKClass>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Группы (asynchronously)
     * Возвращает список групп (наборов)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список групп </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyClassesGetAsync(final ApiCallback<List<MKClass>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyClassesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<MKClass>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyCoursesGet
     * @param includeClasses Включить в ответ группы (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список программ </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyCoursesGetCall(Boolean includeClasses, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/courses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (includeClasses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeClasses", includeClasses));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyCoursesGetValidateBeforeCall(Boolean includeClasses, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1CompanyCoursesGetCall(includeClasses, _callback);
        return localVarCall;

    }

    /**
     * Программы
     * Возвращает список программ обучения
     * @param includeClasses Включить в ответ группы (optional, default to false)
     * @return List&lt;MKCourse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список программ </td><td>  -  </td></tr>
     </table>
     */
    public List<MKCourse> v1CompanyCoursesGet(Boolean includeClasses) throws ApiException {
        ApiResponse<List<MKCourse>> localVarResp = v1CompanyCoursesGetWithHttpInfo(includeClasses);
        return localVarResp.getData();
    }

    /**
     * Программы
     * Возвращает список программ обучения
     * @param includeClasses Включить в ответ группы (optional, default to false)
     * @return ApiResponse&lt;List&lt;MKCourse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список программ </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MKCourse>> v1CompanyCoursesGetWithHttpInfo(Boolean includeClasses) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyCoursesGetValidateBeforeCall(includeClasses, null);
        Type localVarReturnType = new TypeToken<List<MKCourse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Программы (asynchronously)
     * Возвращает список программ обучения
     * @param includeClasses Включить в ответ группы (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список программ </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyCoursesGetAsync(Boolean includeClasses, final ApiCallback<List<MKCourse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyCoursesGetValidateBeforeCall(includeClasses, _callback);
        Type localVarReturnType = new TypeToken<List<MKCourse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyLessonRecordsPost
     * @param mkLessonRecord Информация о записи (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной записи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonRecordsPostCall(MKLessonRecord mkLessonRecord, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkLessonRecord;

        // create path and map variables
        String localVarPath = "/v1/company/lessonRecords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyLessonRecordsPostValidateBeforeCall(MKLessonRecord mkLessonRecord, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mkLessonRecord' is set
        if (mkLessonRecord == null) {
            throw new ApiException("Missing the required parameter 'mkLessonRecord' when calling v1CompanyLessonRecordsPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyLessonRecordsPostCall(mkLessonRecord, _callback);
        return localVarCall;

    }

    /**
     * Содание записи на занятие
     * Создает новую запись на занятие
     * @param mkLessonRecord Информация о записи (required)
     * @return MKLessonRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной записи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public MKLessonRecord v1CompanyLessonRecordsPost(MKLessonRecord mkLessonRecord) throws ApiException {
        ApiResponse<MKLessonRecord> localVarResp = v1CompanyLessonRecordsPostWithHttpInfo(mkLessonRecord);
        return localVarResp.getData();
    }

    /**
     * Содание записи на занятие
     * Создает новую запись на занятие
     * @param mkLessonRecord Информация о записи (required)
     * @return ApiResponse&lt;MKLessonRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной записи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKLessonRecord> v1CompanyLessonRecordsPostWithHttpInfo(MKLessonRecord mkLessonRecord) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyLessonRecordsPostValidateBeforeCall(mkLessonRecord, null);
        Type localVarReturnType = new TypeToken<MKLessonRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Содание записи на занятие (asynchronously)
     * Создает новую запись на занятие
     * @param mkLessonRecord Информация о записи (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные созданной записи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonRecordsPostAsync(MKLessonRecord mkLessonRecord, final ApiCallback<MKLessonRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyLessonRecordsPostValidateBeforeCall(mkLessonRecord, _callback);
        Type localVarReturnType = new TypeToken<MKLessonRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyLessonRecordsRecordIdDelete
     * @param recordId ID записи (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Запись удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonRecordsRecordIdDeleteCall(Long recordId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/lessonRecords/{recordId}"
            .replaceAll("\\{" + "recordId" + "\\}", localVarApiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyLessonRecordsRecordIdDeleteValidateBeforeCall(Long recordId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling v1CompanyLessonRecordsRecordIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyLessonRecordsRecordIdDeleteCall(recordId, _callback);
        return localVarCall;

    }

    /**
     * Удаление записи
     * Удаляет запись на занятие
     * @param recordId ID записи (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Запись удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public void v1CompanyLessonRecordsRecordIdDelete(Long recordId) throws ApiException {
        v1CompanyLessonRecordsRecordIdDeleteWithHttpInfo(recordId);
    }

    /**
     * Удаление записи
     * Удаляет запись на занятие
     * @param recordId ID записи (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Запись удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1CompanyLessonRecordsRecordIdDeleteWithHttpInfo(Long recordId) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyLessonRecordsRecordIdDeleteValidateBeforeCall(recordId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удаление записи (asynchronously)
     * Удаляет запись на занятие
     * @param recordId ID записи (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Запись удалена </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonRecordsRecordIdDeleteAsync(Long recordId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyLessonRecordsRecordIdDeleteValidateBeforeCall(recordId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyLessonRecordsRecordIdGet
     * @param recordId ID записи (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные записи </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonRecordsRecordIdGetCall(Long recordId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/lessonRecords/{recordId}"
            .replaceAll("\\{" + "recordId" + "\\}", localVarApiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyLessonRecordsRecordIdGetValidateBeforeCall(Long recordId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling v1CompanyLessonRecordsRecordIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyLessonRecordsRecordIdGetCall(recordId, _callback);
        return localVarCall;

    }

    /**
     * Информация о записи
     * Возвращает информацию о записи на занятие
     * @param recordId ID записи (required)
     * @return MKLessonRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные записи </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public MKLessonRecord v1CompanyLessonRecordsRecordIdGet(Long recordId) throws ApiException {
        ApiResponse<MKLessonRecord> localVarResp = v1CompanyLessonRecordsRecordIdGetWithHttpInfo(recordId);
        return localVarResp.getData();
    }

    /**
     * Информация о записи
     * Возвращает информацию о записи на занятие
     * @param recordId ID записи (required)
     * @return ApiResponse&lt;MKLessonRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные записи </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKLessonRecord> v1CompanyLessonRecordsRecordIdGetWithHttpInfo(Long recordId) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyLessonRecordsRecordIdGetValidateBeforeCall(recordId, null);
        Type localVarReturnType = new TypeToken<MKLessonRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Информация о записи (asynchronously)
     * Возвращает информацию о записи на занятие
     * @param recordId ID записи (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Данные записи </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonRecordsRecordIdGetAsync(Long recordId, final ApiCallback<MKLessonRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyLessonRecordsRecordIdGetValidateBeforeCall(recordId, _callback);
        Type localVarReturnType = new TypeToken<MKLessonRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyLessonRecordsRecordIdPost
     * @param recordId ID записи (required)
     * @param mkLessonRecordEdit Обновленная информация о записи (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные записи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonRecordsRecordIdPostCall(Long recordId, MKLessonRecordEdit mkLessonRecordEdit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkLessonRecordEdit;

        // create path and map variables
        String localVarPath = "/v1/company/lessonRecords/{recordId}"
            .replaceAll("\\{" + "recordId" + "\\}", localVarApiClient.escapeString(recordId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyLessonRecordsRecordIdPostValidateBeforeCall(Long recordId, MKLessonRecordEdit mkLessonRecordEdit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'recordId' is set
        if (recordId == null) {
            throw new ApiException("Missing the required parameter 'recordId' when calling v1CompanyLessonRecordsRecordIdPost(Async)");
        }
        
        // verify the required parameter 'mkLessonRecordEdit' is set
        if (mkLessonRecordEdit == null) {
            throw new ApiException("Missing the required parameter 'mkLessonRecordEdit' when calling v1CompanyLessonRecordsRecordIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyLessonRecordsRecordIdPostCall(recordId, mkLessonRecordEdit, _callback);
        return localVarCall;

    }

    /**
     * Изменение записи
     * Изменяет информацию о записи
     * @param recordId ID записи (required)
     * @param mkLessonRecordEdit Обновленная информация о записи (required)
     * @return MKLessonRecord
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные записи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public MKLessonRecord v1CompanyLessonRecordsRecordIdPost(Long recordId, MKLessonRecordEdit mkLessonRecordEdit) throws ApiException {
        ApiResponse<MKLessonRecord> localVarResp = v1CompanyLessonRecordsRecordIdPostWithHttpInfo(recordId, mkLessonRecordEdit);
        return localVarResp.getData();
    }

    /**
     * Изменение записи
     * Изменяет информацию о записи
     * @param recordId ID записи (required)
     * @param mkLessonRecordEdit Обновленная информация о записи (required)
     * @return ApiResponse&lt;MKLessonRecord&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные записи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKLessonRecord> v1CompanyLessonRecordsRecordIdPostWithHttpInfo(Long recordId, MKLessonRecordEdit mkLessonRecordEdit) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyLessonRecordsRecordIdPostValidateBeforeCall(recordId, mkLessonRecordEdit, null);
        Type localVarReturnType = new TypeToken<MKLessonRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Изменение записи (asynchronously)
     * Изменяет информацию о записи
     * @param recordId ID записи (required)
     * @param mkLessonRecordEdit Обновленная информация о записи (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Обновленные данные записи </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Запись не найдена </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonRecordsRecordIdPostAsync(Long recordId, MKLessonRecordEdit mkLessonRecordEdit, final ApiCallback<MKLessonRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyLessonRecordsRecordIdPostValidateBeforeCall(recordId, mkLessonRecordEdit, _callback);
        Type localVarReturnType = new TypeToken<MKLessonRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyLessonsGet
     * @param date Дата проведения занятий. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону (optional)
     * @param roomId ID аудитории (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param teacherId ID сотрудника - преподавателя (optional)
     * @param statusId Статус занятия. 0 - не проведено, 1 - проведено (optional)
     * @param userId ID ученика, записанного на занятие (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @param includeRecords Включить в ответ записи на занятия (optional, default to false)
     * @param includeMarks Включить в ответ оценки к занятию (optional, default to false)
     * @param includeTasks Включить в ответ задания к занятию (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список занятий </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonsGetCall(List<LocalDate> date, List<Long> roomId, List<Long> filialId, List<Long> classId, List<Long> teacherId, Integer statusId, Long userId, Integer offset, Integer limit, Boolean includeRecords, Boolean includeMarks, Boolean includeTasks, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/lessons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (date != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "date", date));
        }

        if (roomId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "roomId", roomId));
        }

        if (filialId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "filialId", filialId));
        }

        if (classId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "classId", classId));
        }

        if (teacherId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "teacherId", teacherId));
        }

        if (statusId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusId", statusId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (includeRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeRecords", includeRecords));
        }

        if (includeMarks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeMarks", includeMarks));
        }

        if (includeTasks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTasks", includeTasks));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyLessonsGetValidateBeforeCall(List<LocalDate> date, List<Long> roomId, List<Long> filialId, List<Long> classId, List<Long> teacherId, Integer statusId, Long userId, Integer offset, Integer limit, Boolean includeRecords, Boolean includeMarks, Boolean includeTasks, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1CompanyLessonsGetCall(date, roomId, filialId, classId, teacherId, statusId, userId, offset, limit, includeRecords, includeMarks, includeTasks, _callback);
        return localVarCall;

    }

    /**
     * Занятия
     * Возвращает список занятий
     * @param date Дата проведения занятий. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону (optional)
     * @param roomId ID аудитории (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param teacherId ID сотрудника - преподавателя (optional)
     * @param statusId Статус занятия. 0 - не проведено, 1 - проведено (optional)
     * @param userId ID ученика, записанного на занятие (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @param includeRecords Включить в ответ записи на занятия (optional, default to false)
     * @param includeMarks Включить в ответ оценки к занятию (optional, default to false)
     * @param includeTasks Включить в ответ задания к занятию (optional, default to false)
     * @return MKLessons
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список занятий </td><td>  -  </td></tr>
     </table>
     */
    public MKLessons v1CompanyLessonsGet(List<LocalDate> date, List<Long> roomId, List<Long> filialId, List<Long> classId, List<Long> teacherId, Integer statusId, Long userId, Integer offset, Integer limit, Boolean includeRecords, Boolean includeMarks, Boolean includeTasks) throws ApiException {
        ApiResponse<MKLessons> localVarResp = v1CompanyLessonsGetWithHttpInfo(date, roomId, filialId, classId, teacherId, statusId, userId, offset, limit, includeRecords, includeMarks, includeTasks);
        return localVarResp.getData();
    }

    /**
     * Занятия
     * Возвращает список занятий
     * @param date Дата проведения занятий. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону (optional)
     * @param roomId ID аудитории (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param teacherId ID сотрудника - преподавателя (optional)
     * @param statusId Статус занятия. 0 - не проведено, 1 - проведено (optional)
     * @param userId ID ученика, записанного на занятие (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @param includeRecords Включить в ответ записи на занятия (optional, default to false)
     * @param includeMarks Включить в ответ оценки к занятию (optional, default to false)
     * @param includeTasks Включить в ответ задания к занятию (optional, default to false)
     * @return ApiResponse&lt;MKLessons&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список занятий </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MKLessons> v1CompanyLessonsGetWithHttpInfo(List<LocalDate> date, List<Long> roomId, List<Long> filialId, List<Long> classId, List<Long> teacherId, Integer statusId, Long userId, Integer offset, Integer limit, Boolean includeRecords, Boolean includeMarks, Boolean includeTasks) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyLessonsGetValidateBeforeCall(date, roomId, filialId, classId, teacherId, statusId, userId, offset, limit, includeRecords, includeMarks, includeTasks, null);
        Type localVarReturnType = new TypeToken<MKLessons>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Занятия (asynchronously)
     * Возвращает список занятий
     * @param date Дата проведения занятий. Если указана одна дата, то происходит поиск только по одной дате. Если указаны 2 даты, то производится поиск по диапазону (optional)
     * @param roomId ID аудитории (optional)
     * @param filialId ID филиала. (optional)
     * @param classId ID группы (optional)
     * @param teacherId ID сотрудника - преподавателя (optional)
     * @param statusId Статус занятия. 0 - не проведено, 1 - проведено (optional)
     * @param userId ID ученика, записанного на занятие (optional)
     * @param offset Номер первой записи. Используется для постраничного вывода. (optional, default to 0)
     * @param limit Максимальное количество возвращаемых строк. Используется для постраничного вывода. (optional, default to 100)
     * @param includeRecords Включить в ответ записи на занятия (optional, default to false)
     * @param includeMarks Включить в ответ оценки к занятию (optional, default to false)
     * @param includeTasks Включить в ответ задания к занятию (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список занятий </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonsGetAsync(List<LocalDate> date, List<Long> roomId, List<Long> filialId, List<Long> classId, List<Long> teacherId, Integer statusId, Long userId, Integer offset, Integer limit, Boolean includeRecords, Boolean includeMarks, Boolean includeTasks, final ApiCallback<MKLessons> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyLessonsGetValidateBeforeCall(date, roomId, filialId, classId, teacherId, statusId, userId, offset, limit, includeRecords, includeMarks, includeTasks, _callback);
        Type localVarReturnType = new TypeToken<MKLessons>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyLessonsLessonIdMarkTypeUserIdDelete
     * @param lessonId ID занятия (required)
     * @param userId ID пользователя (required)
     * @param type Тип оценки (За дз / за занятие) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Оценка удалена </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Оценка или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonsLessonIdMarkTypeUserIdDeleteCall(Long lessonId, Long userId, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/lessons/{lessonId}/mark/{type}/{userId}"
            .replaceAll("\\{" + "lessonId" + "\\}", localVarApiClient.escapeString(lessonId.toString()))
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyLessonsLessonIdMarkTypeUserIdDeleteValidateBeforeCall(Long lessonId, Long userId, String type, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lessonId' is set
        if (lessonId == null) {
            throw new ApiException("Missing the required parameter 'lessonId' when calling v1CompanyLessonsLessonIdMarkTypeUserIdDelete(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling v1CompanyLessonsLessonIdMarkTypeUserIdDelete(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling v1CompanyLessonsLessonIdMarkTypeUserIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdMarkTypeUserIdDeleteCall(lessonId, userId, type, _callback);
        return localVarCall;

    }

    /**
     * Удаление оценки за занятие
     * Удаляет оценку из системы.
     * @param lessonId ID занятия (required)
     * @param userId ID пользователя (required)
     * @param type Тип оценки (За дз / за занятие) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Оценка удалена </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Оценка или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public void v1CompanyLessonsLessonIdMarkTypeUserIdDelete(Long lessonId, Long userId, String type) throws ApiException {
        v1CompanyLessonsLessonIdMarkTypeUserIdDeleteWithHttpInfo(lessonId, userId, type);
    }

    /**
     * Удаление оценки за занятие
     * Удаляет оценку из системы.
     * @param lessonId ID занятия (required)
     * @param userId ID пользователя (required)
     * @param type Тип оценки (За дз / за занятие) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Оценка удалена </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Оценка или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1CompanyLessonsLessonIdMarkTypeUserIdDeleteWithHttpInfo(Long lessonId, Long userId, String type) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdMarkTypeUserIdDeleteValidateBeforeCall(lessonId, userId, type, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удаление оценки за занятие (asynchronously)
     * Удаляет оценку из системы.
     * @param lessonId ID занятия (required)
     * @param userId ID пользователя (required)
     * @param type Тип оценки (За дз / за занятие) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Оценка удалена </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Оценка или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonsLessonIdMarkTypeUserIdDeleteAsync(Long lessonId, Long userId, String type, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdMarkTypeUserIdDeleteValidateBeforeCall(lessonId, userId, type, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyLessonsLessonIdMarkTypeUserIdPost
     * @param lessonId ID занятия (required)
     * @param userId ID пользователя (required)
     * @param type Тип оценки (За дз / за занятие) (required)
     * @param mkLessonMarkEdit Данные оценки (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Оценка обновлена/добавлена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Оценка или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonsLessonIdMarkTypeUserIdPostCall(Long lessonId, Long userId, String type, MKLessonMarkEdit mkLessonMarkEdit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkLessonMarkEdit;

        // create path and map variables
        String localVarPath = "/v1/company/lessons/{lessonId}/mark/{type}/{userId}"
            .replaceAll("\\{" + "lessonId" + "\\}", localVarApiClient.escapeString(lessonId.toString()))
            .replaceAll("\\{" + "userId" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyLessonsLessonIdMarkTypeUserIdPostValidateBeforeCall(Long lessonId, Long userId, String type, MKLessonMarkEdit mkLessonMarkEdit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lessonId' is set
        if (lessonId == null) {
            throw new ApiException("Missing the required parameter 'lessonId' when calling v1CompanyLessonsLessonIdMarkTypeUserIdPost(Async)");
        }
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling v1CompanyLessonsLessonIdMarkTypeUserIdPost(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling v1CompanyLessonsLessonIdMarkTypeUserIdPost(Async)");
        }
        
        // verify the required parameter 'mkLessonMarkEdit' is set
        if (mkLessonMarkEdit == null) {
            throw new ApiException("Missing the required parameter 'mkLessonMarkEdit' when calling v1CompanyLessonsLessonIdMarkTypeUserIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdMarkTypeUserIdPostCall(lessonId, userId, type, mkLessonMarkEdit, _callback);
        return localVarCall;

    }

    /**
     * Создание/изменение оценки за занятие
     * Создает или, если уже создано, изменяет оценку на занятие
     * @param lessonId ID занятия (required)
     * @param userId ID пользователя (required)
     * @param type Тип оценки (За дз / за занятие) (required)
     * @param mkLessonMarkEdit Данные оценки (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Оценка обновлена/добавлена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Оценка или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public void v1CompanyLessonsLessonIdMarkTypeUserIdPost(Long lessonId, Long userId, String type, MKLessonMarkEdit mkLessonMarkEdit) throws ApiException {
        v1CompanyLessonsLessonIdMarkTypeUserIdPostWithHttpInfo(lessonId, userId, type, mkLessonMarkEdit);
    }

    /**
     * Создание/изменение оценки за занятие
     * Создает или, если уже создано, изменяет оценку на занятие
     * @param lessonId ID занятия (required)
     * @param userId ID пользователя (required)
     * @param type Тип оценки (За дз / за занятие) (required)
     * @param mkLessonMarkEdit Данные оценки (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Оценка обновлена/добавлена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Оценка или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1CompanyLessonsLessonIdMarkTypeUserIdPostWithHttpInfo(Long lessonId, Long userId, String type, MKLessonMarkEdit mkLessonMarkEdit) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdMarkTypeUserIdPostValidateBeforeCall(lessonId, userId, type, mkLessonMarkEdit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Создание/изменение оценки за занятие (asynchronously)
     * Создает или, если уже создано, изменяет оценку на занятие
     * @param lessonId ID занятия (required)
     * @param userId ID пользователя (required)
     * @param type Тип оценки (За дз / за занятие) (required)
     * @param mkLessonMarkEdit Данные оценки (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Оценка обновлена/добавлена </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Оценка или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonsLessonIdMarkTypeUserIdPostAsync(Long lessonId, Long userId, String type, MKLessonMarkEdit mkLessonMarkEdit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdMarkTypeUserIdPostValidateBeforeCall(lessonId, userId, type, mkLessonMarkEdit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyLessonsLessonIdTaskTypeDelete
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Задание удалено </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonsLessonIdTaskTypeDeleteCall(Long lessonId, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/lessons/{lessonId}/task/{type}"
            .replaceAll("\\{" + "lessonId" + "\\}", localVarApiClient.escapeString(lessonId.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyLessonsLessonIdTaskTypeDeleteValidateBeforeCall(Long lessonId, String type, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lessonId' is set
        if (lessonId == null) {
            throw new ApiException("Missing the required parameter 'lessonId' when calling v1CompanyLessonsLessonIdTaskTypeDelete(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling v1CompanyLessonsLessonIdTaskTypeDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdTaskTypeDeleteCall(lessonId, type, _callback);
        return localVarCall;

    }

    /**
     * Удаление задания на занятие
     * Удаляет задание из системы.
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Задание удалено </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public void v1CompanyLessonsLessonIdTaskTypeDelete(Long lessonId, String type) throws ApiException {
        v1CompanyLessonsLessonIdTaskTypeDeleteWithHttpInfo(lessonId, type);
    }

    /**
     * Удаление задания на занятие
     * Удаляет задание из системы.
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Задание удалено </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1CompanyLessonsLessonIdTaskTypeDeleteWithHttpInfo(Long lessonId, String type) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdTaskTypeDeleteValidateBeforeCall(lessonId, type, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Удаление задания на занятие (asynchronously)
     * Удаляет задание из системы.
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Задание удалено </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonsLessonIdTaskTypeDeleteAsync(Long lessonId, String type, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdTaskTypeDeleteValidateBeforeCall(lessonId, type, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyLessonsLessonIdTaskTypeFilesGet
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список файлов прикрепленных к заданию </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonsLessonIdTaskTypeFilesGetCall(Long lessonId, String type, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/company/lessons/{lessonId}/task/{type}/files"
            .replaceAll("\\{" + "lessonId" + "\\}", localVarApiClient.escapeString(lessonId.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyLessonsLessonIdTaskTypeFilesGetValidateBeforeCall(Long lessonId, String type, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lessonId' is set
        if (lessonId == null) {
            throw new ApiException("Missing the required parameter 'lessonId' when calling v1CompanyLessonsLessonIdTaskTypeFilesGet(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling v1CompanyLessonsLessonIdTaskTypeFilesGet(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdTaskTypeFilesGetCall(lessonId, type, _callback);
        return localVarCall;

    }

    /**
     * Список файлов задания
     * Возвращает массив файлов прикрепленных к заданию
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @return List&lt;java.io.File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список файлов прикрепленных к заданию </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public List<java.io.File> v1CompanyLessonsLessonIdTaskTypeFilesGet(Long lessonId, String type) throws ApiException {
        ApiResponse<List<java.io.File>> localVarResp = v1CompanyLessonsLessonIdTaskTypeFilesGetWithHttpInfo(lessonId, type);
        return localVarResp.getData();
    }

    /**
     * Список файлов задания
     * Возвращает массив файлов прикрепленных к заданию
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @return ApiResponse&lt;List&lt;java.io.File&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список файлов прикрепленных к заданию </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<java.io.File>> v1CompanyLessonsLessonIdTaskTypeFilesGetWithHttpInfo(Long lessonId, String type) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdTaskTypeFilesGetValidateBeforeCall(lessonId, type, null);
        Type localVarReturnType = new TypeToken<List<java.io.File>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Список файлов задания (asynchronously)
     * Возвращает массив файлов прикрепленных к заданию
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список файлов прикрепленных к заданию </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonsLessonIdTaskTypeFilesGetAsync(Long lessonId, String type, final ApiCallback<List<java.io.File>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdTaskTypeFilesGetValidateBeforeCall(lessonId, type, _callback);
        Type localVarReturnType = new TypeToken<List<java.io.File>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyLessonsLessonIdTaskTypeFilesPost
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @param mkDownloadFile Файл (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Файл добавлен </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Файл слишком большой </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonsLessonIdTaskTypeFilesPostCall(Long lessonId, String type, MKDownloadFile mkDownloadFile, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkDownloadFile;

        // create path and map variables
        String localVarPath = "/v1/company/lessons/{lessonId}/task/{type}/files"
            .replaceAll("\\{" + "lessonId" + "\\}", localVarApiClient.escapeString(lessonId.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyLessonsLessonIdTaskTypeFilesPostValidateBeforeCall(Long lessonId, String type, MKDownloadFile mkDownloadFile, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lessonId' is set
        if (lessonId == null) {
            throw new ApiException("Missing the required parameter 'lessonId' when calling v1CompanyLessonsLessonIdTaskTypeFilesPost(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling v1CompanyLessonsLessonIdTaskTypeFilesPost(Async)");
        }
        
        // verify the required parameter 'mkDownloadFile' is set
        if (mkDownloadFile == null) {
            throw new ApiException("Missing the required parameter 'mkDownloadFile' when calling v1CompanyLessonsLessonIdTaskTypeFilesPost(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdTaskTypeFilesPostCall(lessonId, type, mkDownloadFile, _callback);
        return localVarCall;

    }

    /**
     * Добавление файла задания на занятие
     * Добавляет файл задания на занятие
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @param mkDownloadFile Файл (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Файл добавлен </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Файл слишком большой </td><td>  -  </td></tr>
     </table>
     */
    public void v1CompanyLessonsLessonIdTaskTypeFilesPost(Long lessonId, String type, MKDownloadFile mkDownloadFile) throws ApiException {
        v1CompanyLessonsLessonIdTaskTypeFilesPostWithHttpInfo(lessonId, type, mkDownloadFile);
    }

    /**
     * Добавление файла задания на занятие
     * Добавляет файл задания на занятие
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @param mkDownloadFile Файл (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Файл добавлен </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Файл слишком большой </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1CompanyLessonsLessonIdTaskTypeFilesPostWithHttpInfo(Long lessonId, String type, MKDownloadFile mkDownloadFile) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdTaskTypeFilesPostValidateBeforeCall(lessonId, type, mkDownloadFile, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Добавление файла задания на занятие (asynchronously)
     * Добавляет файл задания на занятие
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @param mkDownloadFile Файл (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Файл добавлен </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Файл слишком большой </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonsLessonIdTaskTypeFilesPostAsync(Long lessonId, String type, MKDownloadFile mkDownloadFile, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdTaskTypeFilesPostValidateBeforeCall(lessonId, type, mkDownloadFile, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1CompanyLessonsLessonIdTaskTypePost
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @param mkLessonTaskEdit Данные задания (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Задание обновлено/добавлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonsLessonIdTaskTypePostCall(Long lessonId, String type, MKLessonTaskEdit mkLessonTaskEdit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = mkLessonTaskEdit;

        // create path and map variables
        String localVarPath = "/v1/company/lessons/{lessonId}/task/{type}"
            .replaceAll("\\{" + "lessonId" + "\\}", localVarApiClient.escapeString(lessonId.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "companyApiKey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1CompanyLessonsLessonIdTaskTypePostValidateBeforeCall(Long lessonId, String type, MKLessonTaskEdit mkLessonTaskEdit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'lessonId' is set
        if (lessonId == null) {
            throw new ApiException("Missing the required parameter 'lessonId' when calling v1CompanyLessonsLessonIdTaskTypePost(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling v1CompanyLessonsLessonIdTaskTypePost(Async)");
        }
        
        // verify the required parameter 'mkLessonTaskEdit' is set
        if (mkLessonTaskEdit == null) {
            throw new ApiException("Missing the required parameter 'mkLessonTaskEdit' when calling v1CompanyLessonsLessonIdTaskTypePost(Async)");
        }
        

        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdTaskTypePostCall(lessonId, type, mkLessonTaskEdit, _callback);
        return localVarCall;

    }

    /**
     * Создание/изменение задания на занятие
     * Создает или, если уже создано, изменяет задание на занятие
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @param mkLessonTaskEdit Данные задания (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Задание обновлено/добавлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public void v1CompanyLessonsLessonIdTaskTypePost(Long lessonId, String type, MKLessonTaskEdit mkLessonTaskEdit) throws ApiException {
        v1CompanyLessonsLessonIdTaskTypePostWithHttpInfo(lessonId, type, mkLessonTaskEdit);
    }

    /**
     * Создание/изменение задания на занятие
     * Создает или, если уже создано, изменяет задание на занятие
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @param mkLessonTaskEdit Данные задания (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Задание обновлено/добавлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1CompanyLessonsLessonIdTaskTypePostWithHttpInfo(Long lessonId, String type, MKLessonTaskEdit mkLessonTaskEdit) throws ApiException {
        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdTaskTypePostValidateBeforeCall(lessonId, type, mkLessonTaskEdit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Создание/изменение задания на занятие (asynchronously)
     * Создает или, если уже создано, изменяет задание на занятие
     * @param lessonId ID занятия (required)
     * @param type Тип задания (Домашнее / за занятие) (required)
     * @param mkLessonTaskEdit Данные задания (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Задание обновлено/добавлено </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка валидации </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Ограничения лицензии </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Задание или занятие не найдено </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1CompanyLessonsLessonIdTaskTypePostAsync(Long lessonId, String type, MKLessonTaskEdit mkLessonTaskEdit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1CompanyLessonsLessonIdTaskTypePostValidateBeforeCall(lessonId, type, mkLessonTaskEdit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
